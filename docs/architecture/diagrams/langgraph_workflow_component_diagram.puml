@startuml LangGraph Workflow System - Component Diagram

skinparam componentFontSize 12
skinparam componentFontStyle bold
skinparam interfaceFontSize 10
skinparam interfaceFontStyle normal

package "LangGraph Workflow System" {
    
    component "LangGraphWorkflowManager" as WFM {
        interface "execute_workflow()" as WFM_EXEC
        interface "create_workflow()" as WFM_CREATE
        interface "validate_state()" as WFM_VALIDATE
    }
    
    component "StateGraph" as SG {
        interface "add_node()" as SG_ADD_NODE
        interface "add_edge()" as SG_ADD_EDGE
        interface "compile()" as SG_COMPILE
        interface "invoke()" as SG_INVOKE
    }
    
    component "MemoryManager" as MM {
        interface "save_recall_memory()" as MM_SAVE
        interface "search_recall_memories()" as MM_SEARCH
        interface "save_knowledge_triple()" as MM_TRIPLE
        interface "extract_knowledge_triples()" as MM_EXTRACT
        interface "get_memory_stats()" as MM_STATS
    }
    
    component "HandoffManager" as HM {
        interface "validate_handoff_request()" as HM_VALIDATE
        interface "suggest_alternative_agents()" as HM_SUGGEST
        interface "create_handoff_request()" as HM_CREATE
        interface "process_handoff_queue()" as HM_PROCESS
    }
    
    component "AgentNodeFactory" as ANF {
        interface "create_requirements_node()" as ANF_REQ
        interface "create_architecture_node()" as ANF_ARCH
        interface "create_code_generator_node()" as ANF_CODE
        interface "create_test_generator_node()" as ANF_TEST
        interface "create_code_reviewer_node()" as ANF_REVIEW
        interface "create_security_analyst_node()" as ANF_SEC
        interface "create_documentation_generator_node()" as ANF_DOC
    }
    
    component "WorkflowNode" as WN {
        interface "execute()" as WN_EXEC
        interface "create_chain()" as WN_CHAIN
        interface "validate_output()" as WN_VALIDATE
        interface "update_state()" as WN_UPDATE
    }
    
    component "MemoryEnhancedAgent" as MEA {
        interface "execute()" as MEA_EXEC
        interface "load_memories()" as MEA_LOAD
        interface "create_memory_context()" as MEA_CONTEXT
        interface "extract_and_save_triples()" as MEA_TRIPLES
    }
    
    component "ErrorHandler" as EH {
        interface "handle_error()" as EH_HANDLE
        interface "should_retry()" as EH_RETRY
        interface "create_error_state()" as EH_ERROR
        interface "log_error()" as EH_LOG
    }
    
    component "QualityGate" as QG {
        interface "validate_agent_output()" as QG_AGENT
        interface "validate_workflow_state()" as QG_WORKFLOW
        interface "calculate_quality_score()" as QG_SCORE
        interface "generate_validation_report()" as QG_REPORT
    }
}

package "External Dependencies" {
    component "ChatGoogleGenerativeAI" as LLM {
        interface "invoke()" as LLM_INVOKE
        interface "ainvoke()" as LLM_AINVOKE
    }
    
    component "Chroma Vector Store" as CVS {
        interface "add_documents()" as CVS_ADD
        interface "similarity_search()" as CVS_SEARCH
        interface "persist()" as CVS_PERSIST
    }
    
    component "PydanticOutputParser" as POP {
        interface "parse()" as POP_PARSE
        interface "get_format_instructions()" as POP_FORMAT
    }
    
    component "PromptTemplate" as PT {
        interface "format()" as PT_FORMAT
        interface "partial()" as PT_PARTIAL
    }
}

package "Data Models" {
    component "AgentState" as AS {
        interface "update()" as AS_UPDATE
        interface "validate()" as AS_VALIDATE
    }
    
    component "HandoffRequest" as HR {
        interface "validate()" as HR_VALIDATE
        interface "model_dump()" as HR_DUMP
    }
    
    component "KnowledgeTriple" as KT {
        interface "validate()" as KT_VALIDATE
        interface "to_dict()" as KT_DICT
    }
}

' Component Relationships
WFM --> SG : uses
WFM --> MM : uses
WFM --> HM : uses
WFM --> ANF : uses
WFM --> EH : uses
WFM --> QG : uses

SG --> WN : executes
SG --> LLM : uses

MM --> CVS : stores
MM --> LLM : uses
MM --> AS : updates

HM --> HR : validates
HM --> AS : processes

ANF --> WN : creates
ANF --> LLM : uses
ANF --> POP : uses
ANF --> PT : uses

WN --> LLM : invokes
WN --> POP : parses
WN --> PT : formats
WN --> AS : updates
WN --> MM : uses
WN --> QG : validates

MEA --> MM : uses
MEA --> AS : updates
MEA --> LLM : uses

EH --> AS : updates
EH --> LLM : uses

QG --> AS : validates
QG --> LLM : uses

' Data Flow
AS --> WFM : input/output
AS --> SG : state
AS --> MM : context
AS --> HM : state
AS --> WN : state
AS --> MEA : state
AS --> EH : state
AS --> QG : state

HR --> HM : input
HR --> AS : stored

KT --> MM : stored
KT --> AS : context

' Interface Connections
WFM_EXEC --> SG_INVOKE
WFM_CREATE --> SG_ADD_NODE
WFM_CREATE --> SG_ADD_EDGE
WFM_CREATE --> SG_COMPILE

MM_SAVE --> CVS_ADD
MM_SEARCH --> CVS_SEARCH
MM_EXTRACT --> LLM_AINVOKE

HM_VALIDATE --> HR_VALIDATE
HM_PROCESS --> AS_UPDATE

ANF_REQ --> WN_EXEC
ANF_ARCH --> WN_EXEC
ANF_CODE --> WN_EXEC
ANF_TEST --> WN_EXEC
ANF_REVIEW --> WN_EXEC
ANF_SEC --> WN_EXEC
ANF_DOC --> WN_EXEC

WN_EXEC --> LLM_INVOKE
WN_EXEC --> POP_PARSE
WN_EXEC --> PT_FORMAT
WN_EXEC --> AS_UPDATE

MEA_EXEC --> MM_SEARCH
MEA_EXEC --> LLM_INVOKE
MEA_EXEC --> AS_UPDATE

EH_HANDLE --> AS_UPDATE
EH_LOG --> LLM_INVOKE

QG_AGENT --> LLM_INVOKE
QG_WORKFLOW --> AS_VALIDATE

@enduml
