# Agile Development Swarm Template
# ================================
# Optimized for sprint-based development with cross-functional teams

metadata:
  name: "Agile Development Swarm"
  version: "1.0"
  pattern: "domain_expert_swarm + peer_collaboration"
  maturity: "proven"
  use_cases:
    - "Sprint-based software development"
    - "Cross-functional product teams"
    - "Continuous delivery environments"
    - "User-story driven development"

# Carnap Framework Configuration
linguistic_framework:
  primary: "business"
  secondary: "technical"
  translation_protocols:
    business_to_technical:
      - "user_story_to_acceptance_criteria"
      - "business_value_to_technical_requirements"
      - "stakeholder_feedback_to_technical_improvements"
    technical_to_business:
      - "technical_constraints_to_business_impact"
      - "implementation_progress_to_sprint_status"
      - "technical_debt_to_velocity_impact"

# Agent Configuration
agents:
  product_owner:
    role: "Product Strategy and Requirements"
    language_layer: "business"
    linguistic_framework: "business"
    specialization: "product_management"
    responsibilities:
      - "user_story_creation"
      - "backlog_prioritization"
      - "stakeholder_communication"
      - "acceptance_criteria_definition"
      - "business_value_assessment"
    communication_style: "directive_collaborative"
    authority_level: "product_decisions"
    coordination_patterns: ["hierarchical", "peer_consultation"]
    
  scrum_master:
    role: "Process Facilitation and Team Coordination"
    language_layer: "documentation"
    linguistic_framework: "procedural"
    specialization: "agile_methodology"
    responsibilities:
      - "sprint_planning_facilitation"
      - "daily_standup_coordination"
      - "impediment_removal"
      - "retrospective_facilitation"
      - "agile_metrics_tracking"
    communication_style: "facilitative"
    authority_level: "process_governance"
    coordination_patterns: ["peer_collaboration", "event_driven"]
    
  tech_lead:
    role: "Technical Architecture and Code Quality"
    language_layer: "technical"
    linguistic_framework: "technical"
    specialization: "software_architecture"
    responsibilities:
      - "technical_design_decisions"
      - "code_review_oversight"
      - "technical_debt_management"
      - "development_standards_enforcement"
      - "technical_risk_assessment"
    communication_style: "authoritative_collaborative"
    authority_level: "technical_decisions"
    coordination_patterns: ["hierarchical", "peer_collaboration"]
    
  developers:
    role: "Feature Implementation and Testing"
    language_layer: "technical"
    linguistic_framework: "technical"
    specialization: "software_development"
    count: 3-6
    responsibilities:
      - "user_story_implementation"
      - "unit_test_development"
      - "code_review_participation"
      - "technical_documentation"
      - "continuous_integration_maintenance"
    communication_style: "collaborative"
    authority_level: "implementation_decisions"
    coordination_patterns: ["peer_collaboration", "pipeline_processing"]
    
  qa_engineer:
    role: "Quality Assurance and Testing"
    language_layer: "technical"
    linguistic_framework: "validation"
    specialization: "quality_assurance"
    responsibilities:
      - "test_plan_development"
      - "automated_test_creation"
      - "manual_testing_execution"
      - "bug_reporting_and_tracking"
      - "quality_metrics_monitoring"
    communication_style: "analytical"
    authority_level: "quality_decisions"
    coordination_patterns: ["pipeline_processing", "peer_collaboration"]

# Communication Protocols
communication:
  daily_standup:
    frequency: "daily"
    participants: ["all_team_members"]
    language_layer: "business"
    duration: "15_minutes"
    format: "structured_updates"
    translation_protocol: "technical_progress_to_business_status"
    
  sprint_planning:
    frequency: "sprint_start"
    participants: ["product_owner", "scrum_master", "tech_lead", "developers"]
    language_layer: "mixed"
    duration: "2-4_hours"
    format: "collaborative_planning"
    translation_protocol: "business_requirements_to_technical_tasks"
    
  sprint_review:
    frequency: "sprint_end"
    participants: ["all_team_members", "stakeholders"]
    language_layer: "business"
    duration: "1-2_hours"
    format: "demonstration_and_feedback"
    translation_protocol: "technical_implementation_to_business_value"
    
  retrospective:
    frequency: "sprint_end"
    participants: ["all_team_members"]
    language_layer: "philosophical"
    duration: "1_hour"
    format: "reflection_and_improvement"
    translation_protocol: "experience_to_process_improvements"
    
  code_review:
    frequency: "continuous"
    participants: ["developers", "tech_lead"]
    language_layer: "technical"
    duration: "30_minutes_per_review"
    format: "asynchronous_collaborative"
    translation_protocol: "code_quality_to_maintainability_impact"

# Coordination Mechanisms
coordination:
  decision_making:
    product_decisions: "product_owner_authority"
    technical_decisions: "tech_lead_authority_with_team_input"
    process_decisions: "team_consensus_with_scrum_master_facilitation"
    implementation_decisions: "developer_autonomy_with_peer_review"
    
  conflict_resolution:
    technical_conflicts: "tech_lead_mediation"
    product_conflicts: "product_owner_decision"
    process_conflicts: "scrum_master_facilitation"
    interpersonal_conflicts: "team_discussion_with_manager_escalation"
    
  knowledge_sharing:
    mechanism: "knowledge_mesh"
    tools: ["documentation", "pair_programming", "tech_talks", "code_reviews"]
    frequency: "continuous"
    
  quality_gates:
    code_quality: "automated_linting_and_peer_review"
    test_coverage: "automated_coverage_reporting"
    functionality: "qa_validation_and_acceptance_testing"
    business_value: "product_owner_acceptance"

# Metrics and Monitoring
metrics:
  velocity:
    measure: "story_points_completed_per_sprint"
    target: "consistent_and_sustainable"
    monitoring: "sprint_retrospectives"
    
  quality:
    measures: ["bug_rate", "test_coverage", "code_review_feedback"]
    targets: ["<5_bugs_per_sprint", ">80%_coverage", "<2_review_cycles"]
    monitoring: "automated_dashboards"
    
  team_health:
    measures: ["team_satisfaction", "psychological_safety", "learning_rate"]
    targets: [">4/5_satisfaction", "high_safety", "continuous_improvement"]
    monitoring: "retrospectives_and_surveys"
    
  business_value:
    measures: ["feature_adoption", "user_satisfaction", "business_metrics_impact"]
    targets: ["increasing_adoption", ">4/5_satisfaction", "positive_impact"]
    monitoring: "product_owner_tracking"

# Adaptation Rules
adaptation:
  velocity_changes:
    condition: "velocity_variance > 20%"
    actions: ["retrospective_deep_dive", "capacity_planning_review", "process_adjustment"]
    
  quality_degradation:
    condition: "quality_metrics_below_threshold"
    actions: ["additional_code_reviews", "refactoring_sprint", "technical_debt_reduction"]
    
  team_satisfaction_low:
    condition: "team_satisfaction < 3/5"
    actions: ["team_building_activities", "process_simplification", "workload_rebalancing"]
    
  stakeholder_dissatisfaction:
    condition: "stakeholder_feedback_negative"
    actions: ["product_strategy_review", "communication_improvement", "demonstration_enhancement"]

# Technology Integration
tools:
  project_management: "jira_or_azure_devops"
  version_control: "git_with_pull_request_workflow"
  continuous_integration: "automated_build_and_test_pipeline"
  communication: "slack_or_teams_with_integration"
  documentation: "confluence_or_notion_with_live_updates"
  monitoring: "application_performance_monitoring"

# Success Criteria
success_criteria:
  delivery:
    - "consistent_sprint_goal_achievement"
    - "predictable_velocity"
    - "high_quality_deliverables"
    
  team:
    - "high_team_satisfaction"
    - "low_turnover_rate"
    - "continuous_skill_improvement"
    
  business:
    - "stakeholder_satisfaction"
    - "business_value_delivery"
    - "user_adoption_and_satisfaction"
    
  technical:
    - "maintainable_codebase"
    - "automated_testing_coverage"
    - "minimal_technical_debt"

# Implementation Guide
implementation_steps:
  1_initial_setup:
    - "team_formation_and_role_assignment"
    - "tool_setup_and_configuration"
    - "communication_protocol_establishment"
    
  2_process_establishment:
    - "sprint_cadence_definition"
    - "definition_of_done_creation"
    - "quality_standards_agreement"
    
  3_first_sprint:
    - "initial_backlog_creation"
    - "sprint_planning_execution"
    - "daily_standup_implementation"
    
  4_continuous_improvement:
    - "retrospective_action_implementation"
    - "metrics_monitoring_and_adjustment"
    - "process_refinement_based_on_feedback"

# Customization Options
customization:
  team_size:
    small: "3-5_members_with_combined_roles"
    medium: "6-9_members_with_specialized_roles"
    large: "10+_members_with_sub_teams"
    
  domain_focus:
    web_development: "frontend_backend_specialization"
    mobile_development: "platform_specific_specialization"
    data_science: "research_engineering_specialization"
    enterprise: "compliance_security_specialization"
    
  maturity_level:
    beginner: "simplified_ceremonies_and_extensive_coaching"
    intermediate: "standard_ceremonies_with_optimization"
    advanced: "customized_ceremonies_with_experimentation"
