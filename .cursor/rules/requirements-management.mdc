# Requirements Management Rule

**CRITICAL**: Always keep requirements.txt up to date with ALL dependencies used in the project. This ensures reproducible builds and proper dependency management.

## Core Requirements Management Standards

### 1. Dependency Documentation Requirements
- **ALL DEPENDENCIES**: Every package used in the project MUST be listed in requirements.txt
- **VERSION SPECIFICATION**: Use specific version ranges (e.g., `>=2.0.0,<3.0.0`) for stability
- **CATEGORIZATION**: Group dependencies by purpose (core, testing, development, etc.)
- **COMMENTS**: Add comments to explain why each dependency is needed

### 2. When to Update Requirements.txt
- **NEW PACKAGE INSTALLED**: Immediately add to requirements.txt after installing
- **PACKAGE UPDATED**: Update version specification in requirements.txt
- **PACKAGE REMOVED**: Remove from requirements.txt when no longer used
- **NEW FEATURE ADDED**: Review and add any new dependencies
- **TESTING FRAMEWORK CHANGES**: Update testing dependencies
- **BUILD TOOL CHANGES**: Update build and deployment dependencies

### 3. Requirements.txt Structure
```txt
# Core Framework Dependencies
langgraph>=0.2.0
langchain>=0.1.0
langchain-core>=0.1.0
langchain-google-genai>=0.1.0

# LLM and AI Dependencies
google-generativeai>=0.8.0
pydantic>=2.0.0

# Web Framework and API
fastapi>=0.104.0
uvicorn>=0.24.0
streamlit>=1.28.0

# Database and Storage
sqlalchemy>=2.0.0
alembic>=1.12.0
redis>=5.0.0

# Testing Framework
pytest>=7.4.0
pytest-asyncio>=0.21.0
pytest-cov>=6.0.0

# Development and Code Quality
black>=23.0.0
flake8>=6.0.0
mypy>=1.5.0
pre-commit>=3.5.0

# Data Processing and Analysis
pandas>=2.1.0
numpy>=1.24.0
scikit-learn>=1.3.0

# Utilities and Configuration
python-dotenv>=1.0.0
pyyaml>=6.0
requests>=2.31.0
aiofiles>=23.0.0
tomli>=2.0.0
```

### 4. Dependency Management Workflow

#### Before Installing New Packages
1. **Check if already listed** - Verify package isn't already in requirements.txt
2. **Check compatibility** - Ensure new package doesn't conflict with existing ones
3. **Document purpose** - Add comment explaining why the package is needed

#### After Installing New Packages
1. **Add to requirements.txt** - Immediately add with appropriate version specification
2. **Test installation** - Verify the package can be installed from requirements.txt
3. **Update documentation** - Document any new dependencies in project docs

#### Regular Maintenance
1. **Monthly review** - Review all dependencies for updates and security issues
2. **Remove unused** - Remove packages that are no longer used
3. **Update versions** - Update to newer versions when safe to do so
4. **Security audit** - Check for known security vulnerabilities

### 5. Version Specification Guidelines

#### Version Ranges
- **Core Framework**: Use conservative ranges (e.g., `>=2.0.0,<3.0.0`)
- **Testing Tools**: Use flexible ranges (e.g., `>=6.0.0`)
- **Development Tools**: Use flexible ranges for latest features
- **Security Critical**: Use exact versions or very narrow ranges

#### Examples
```txt
# Conservative - Core framework
langgraph>=0.2.0,<1.0.0

# Flexible - Testing tools
pytest>=7.4.0

# Exact - Security critical
cryptography==41.0.0

# Latest - Development tools
black>=23.0.0
```

### 6. Testing Requirements.txt

#### Installation Testing
```bash
# Test clean installation
pip install -r requirements.txt

# Test in virtual environment
python -m venv test_env
source test_env/bin/activate  # or test_env\Scripts\activate on Windows
pip install -r requirements.txt
```

#### Dependency Conflict Testing
```bash
# Check for conflicts
pip check

# Generate dependency tree
pip install pipdeptree
pipdeptree
```

### 7. Automated Dependency Management

#### Pre-commit Hooks
- **requirements-checker**: Verify all imports are in requirements.txt
- **safety**: Check for known security vulnerabilities
- **pip-compile**: Generate requirements.txt from requirements.in

#### CI/CD Integration
- **Installation test**: Test requirements.txt installation in CI
- **Security scan**: Automated security vulnerability scanning
- **Dependency audit**: Regular dependency health checks

### 8. Documentation Requirements

#### Requirements.txt Comments
```txt
# Core LangGraph workflow management
langgraph>=0.2.0

# LLM integration with Google Gemini
langchain-google-genai>=0.1.0

# Testing framework with coverage support
pytest-cov>=6.0.0  # Added for test coverage reporting
```

#### Project Documentation
- **Dependency Overview**: Document major dependency categories
- **Installation Guide**: Clear instructions for setting up environment
- **Version Compatibility**: Document version compatibility matrix
- **Migration Guide**: Guide for updating dependencies

### 9. Security Considerations

#### Vulnerability Management
- **Regular updates**: Keep dependencies updated to latest secure versions
- **Security scanning**: Use tools like `safety` to check for vulnerabilities
- **Minimal dependencies**: Only include necessary dependencies
- **Vendor review**: Review and approve all new dependencies

#### Supply Chain Security
- **Source verification**: Verify package sources and authenticity
- **Hash verification**: Use hash verification for critical packages
- **Lock files**: Consider using lock files for exact version pinning
- **Audit trail**: Maintain audit trail of dependency changes

### 10. Compliance and Standards

#### Industry Standards
- **OWASP**: Follow OWASP dependency management guidelines
- **NIST**: Follow NIST software supply chain security guidelines
- **ISO 27001**: Maintain dependency management for security compliance
- **GDPR**: Ensure dependencies don't introduce privacy risks

#### Internal Standards
- **Code review**: All dependency changes require code review
- **Testing**: All new dependencies must pass integration tests
- **Documentation**: All dependencies must be documented
- **Approval**: Major dependency changes require approval

## Implementation Checklist

### For Every New Package
- [ ] Package is necessary for project functionality
- [ ] Package is added to requirements.txt with appropriate version
- [ ] Package is tested in clean environment
- [ ] Package is documented with purpose
- [ ] Package passes security scan
- [ ] Package is approved in code review

### For Every Update
- [ ] Version compatibility is verified
- [ ] Breaking changes are documented
- [ ] Migration guide is provided if needed
- [ ] All tests pass with new version
- [ ] Security implications are assessed
- [ ] Rollback plan is prepared

### For Regular Maintenance
- [ ] Monthly dependency review completed
- [ ] Unused dependencies removed
- [ ] Security vulnerabilities addressed
- [ ] Documentation updated
- [ ] CI/CD tests passing
- [ ] Team notified of changes

## Benefits

- **Reproducible Builds**: Consistent environments across development and production
- **Security**: Reduced risk from outdated or vulnerable dependencies
- **Maintainability**: Clear understanding of project dependencies
- **Compliance**: Meeting security and compliance requirements
- **Collaboration**: Easier onboarding and collaboration
- **Stability**: Reduced risk of dependency-related issues

## System Integration

### LangGraph Workflow Integration
- **Dependency Management Node**: Integrate dependency checks into LangGraph workflow
- **Quality Gates**: Include dependency validation in quality control gates
- **Automated Monitoring**: Use LangGraph for continuous dependency monitoring
- **State Management**: Track dependency state in AgentState

### Supervisor-Swarm Architecture Integration
- **Supervisor Oversight**: Supervisor validates all dependency changes
- **Specialized Agents**: Dedicated agents for security, compliance, and quality checks
- **Handoff Protocols**: Dependency changes trigger appropriate agent handoffs
- **Quality Control**: Dependency management as part of overall quality control

### Future System Enhancements
- **Multi-Project Management**: Centralized dependency management across projects
- **Environment-Specific Requirements**: Different requirements for dev/staging/production
- **Dependency Analytics**: AI-powered dependency optimization recommendations
- **Automated Updates**: Intelligent dependency update automation

## Enforcement

This rule is **ALWAYS APPLIED** and must be followed for all:
- New package installations
- Package updates and removals
- Project setup and deployment
- Code reviews and approvals
- Security audits and assessments
- Compliance reviews
- LangGraph workflow execution
- Quality control processes

**Violations of this rule require immediate remediation.**
description:
globs:
alwaysApply: true
---
