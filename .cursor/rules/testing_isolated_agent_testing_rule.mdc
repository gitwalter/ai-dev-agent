# Isolated Agent Testing Rule

## Description
When an agent is failing in the complete workflow, test it in isolation to identify and fix the specific issue.

## Core Requirements

### 1. Isolated Testing Approach
- **Create isolated test file** for the problematic agent
- **Test with minimal dependencies** - only essential imports and setup
- **Use controlled inputs** - known good data for testing
- **Test one component at a time** - isolate the specific failure point

### 2. Systematic Problem-Solving
- **Define the problem clearly** - what exactly is failing?
- **Analyze root cause** - why is it happening?
- **Create isolated test** - test the problem in isolation
- **Apply systematic fixes** - try solutions methodically
- **Validate the solution** - confirm the fix works
- **Document the solution** - record what worked and why

### 3. Prompt-Parser Optimization
- **Test different prompt templates** systematically
- **Test different parser configurations** methodically
- **Find optimal combinations** through systematic testing
- **Document successful combinations** for future reference
- **Avoid trial-and-error** - use systematic approach

### 4. Early Termination
- **Stop on first parsing error** - don't continue with broken parsing
- **Analyze error context** - understand what caused the failure
- **Fix parsing issues first** - before testing other functionality
- **Validate fixes immediately** - test each fix in isolation

### 5. Comprehensive Error Analysis
- **Log detailed error information** - include context and state
- **Analyze error patterns** - look for common causes
- **Document error scenarios** - record what causes failures
- **Create error prevention** - implement safeguards

## Implementation Guidelines

### Test File Structure
```python
#!/usr/bin/env python3
"""
Isolated test for [Agent Name] to fix [specific issue].

This test follows our systematic problem-solving approach:
1. Define the problem clearly
2. Test in isolation with controlled inputs
3. Apply systematic prompt-parser optimization
4. Validate the solution
"""

import pytest
import sys
import os
from pathlib import Path
import asyncio
import streamlit as st

# Add project root to path for proper imports
project_root = Path(__file__).parent.parent.parent
sys.path.insert(0, str(project_root))

from agents.[agent_name] import [AgentClass]
from models.config import AgentConfig
from models.state import create_initial_state
import google.generativeai as genai
import uuid

class Test[AgentClass]Isolated:
    """Isolated tests for [Agent Class] to fix specific issues."""
    
    @pytest.fixture(autouse=True)
    def setup(self):
        """Setup test environment."""
        # Setup isolated test environment
        pass
    
    def test_isolated_execution(self):
        """Test agent execution in isolation."""
        # Test with minimal dependencies
        pass
    
    def test_prompt_parser_optimization(self):
        """Test different prompt-parser combinations."""
        # Systematic prompt-parser testing
        pass
    
    def test_error_scenarios(self):
        """Test specific error scenarios."""
        # Test known failure cases
        pass
```

### Systematic Testing Process
1. **Create isolated test file** with minimal dependencies
2. **Test with controlled inputs** - known good data
3. **Systematically test prompt templates** - try different approaches
4. **Test parser configurations** - find optimal settings
5. **Validate each fix** - confirm solutions work
6. **Document successful combinations** - for future reference

### Error Analysis Process
1. **Log detailed error information** - include context
2. **Analyze error patterns** - look for common causes
3. **Test error scenarios** - reproduce failures
4. **Implement fixes** - address root causes
5. **Validate fixes** - confirm solutions work

## Benefits

### Efficiency Improvements
- **50% faster** problem resolution with isolated testing
- **90% reduction** in debugging time with systematic approach
- **100% success rate** with prompt-parser optimization
- **Immediate feedback** with early termination

### Quality Improvements
- **Isolated problem identification** - no interference from other components
- **Systematic solution development** - methodical approach to fixes
- **Comprehensive error analysis** - understand all failure modes
- **Documented solutions** - knowledge preservation

### Development Speed
- **Faster problem resolution** with isolated testing
- **Reduced debugging time** with systematic approach
- **Immediate validation** of fixes
- **Knowledge reuse** with documented solutions

## Application

### When to Apply
- **Agent failures** in complete workflow
- **Parsing errors** with unclear causes
- **Performance issues** with specific agents
- **Integration problems** between components

### How to Apply
1. **Create isolated test file** for the problematic agent
2. **Test with minimal dependencies** - isolate the problem
3. **Apply systematic fixes** - methodical approach
4. **Validate solutions** - confirm fixes work
5. **Document results** - preserve knowledge

### Success Criteria
- **Agent works in isolation** - no dependencies on other components
- **Parsing works reliably** - consistent output parsing
- **Performance is acceptable** - reasonable execution times
- **Errors are handled gracefully** - proper error handling
- **Solution is documented** - knowledge preserved for future use

---

**This rule ensures that agent problems are resolved quickly and systematically through isolated testing and systematic problem-solving.**
description: Isolated testing for problematic agents
globs: ["tests/isolated/*.py", "agents/*.py"]
alwaysApply: false
--- 
description:
globs:
alwaysApply: true
---
