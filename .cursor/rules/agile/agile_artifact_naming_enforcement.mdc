# Agile Artifact Naming Convention Enforcement Rule

**CRITICAL**: Enforce strict naming conventions for all agile artifacts with zero tolerance for violations.

## Description

This rule implements automated enforcement of agile artifact naming conventions to ensure consistency, enable reliable automation, and maintain professional standards. All agents must validate and enforce naming conventions when creating, modifying, or maintaining agile artifacts.

## Core Requirements

### 1. **Mandatory Naming Validation**
**ALWAYS REQUIRED**: Validate naming convention before any agile artifact operation

```python
# MANDATORY: Include in all agile operations
def enforce_naming_convention(file_path: str, operation: str) -> bool:
    """Enforce naming convention for agile artifacts."""
    
    # Epic files: epic-{topic}.md
    if '/epics/' in file_path:
        if not re.match(r'^epic-[a-z0-9-]+\.md$', Path(file_path).name):
            raise NamingViolation(f"Epic file must use format: epic-topic.md")
    
    # User stories: US-{XXX}.md  
    elif '/user_stories/' in file_path:
        if not re.match(r'^US-[A-Z0-9-]+\.md$', Path(file_path).name):
            raise NamingViolation(f"User story must use format: US-XXX.md")
    
    # Sprint files: sprint_{N}_{type}.md
    elif '/sprints/' in file_path and file_path.endswith('.md'):
        filename = Path(file_path).name
        if not re.match(r'^(sprint_\d+_[a-z_]+\.md|US-[A-Z0-9-]+\.md|README\.md)$', filename):
            raise NamingViolation(f"Sprint file must use format: sprint_N_type.md")
    
    return True
```

### 2. **Forbidden Operations**
**NEVER ALLOWED**: Creating files that violate naming conventions

```yaml
❌ FORBIDDEN FILE CREATION:
- EPIC-FORMAL-PRINCIPLES.md (use: epic-formal-principles.md)
- SPRINT_1_COMPLETION_REPORT.md (use: sprint_1_completion_status.md)
- Epic_Overview.md (use: epic_overview.md)
- USER_STORY_CATALOG.md (use: user_story_catalog.md)

✅ REQUIRED PATTERNS:
- epic-{topic}.md for epics
- US-{XXX}.md for user stories
- sprint_{N}_{type}.md for sprint files
- {type}_catalog.md for catalogs
```

### 3. **Correction Requirements**
**IMMEDIATE ACTION**: Correct naming violations when discovered

```python
# REQUIRED: Suggest corrections for violations
def suggest_correct_naming(incorrect_name: str, artifact_type: str) -> str:
    """Suggest correct naming for violated files."""
    
    corrections = {
        'EPIC-FORMAL-PRINCIPLES.md': 'epic-formal-principles.md',
        'SPRINT_1_COMPLETION_REPORT.md': 'sprint_1_completion_status.md',
        'Epic_Overview.md': 'epic_overview.md',
        'USER_STORY_CATALOG.md': 'user_story_catalog.md'
    }
    
    if incorrect_name in corrections:
        return corrections[incorrect_name]
    
    # Generate suggestion based on type
    return generate_compliant_name(incorrect_name, artifact_type)
```

## Enforcement Levels

### 1. **Pre-Creation Validation**
**MANDATORY**: Validate before creating any agile artifact

```python
# REQUIRED: Block non-compliant creation
def validate_before_creation(file_path: str) -> None:
    """Validate naming before file creation."""
    
    if not enforce_naming_convention(file_path, "create"):
        suggested = suggest_correct_naming(Path(file_path).name, detect_artifact_type(file_path))
        raise PreventFileCreation(
            f"Cannot create {file_path} - violates naming convention. "
            f"Use: {suggested}"
        )
```

### 2. **Discovery and Reporting**
**MANDATORY**: Report violations when discovered

```python
# REQUIRED: Report violations during operations
def report_naming_violations(directory: str) -> List[str]:
    """Scan and report naming violations."""
    
    violations = []
    for file_path in scan_agile_artifacts(directory):
        try:
            enforce_naming_convention(file_path, "validate")
        except NamingViolation as e:
            violations.append(f"{file_path}: {e}")
    
    return violations
```

### 3. **Automated Correction**
**WHEN SAFE**: Offer automated correction with confirmation

```python
# OPTIONAL: Automated correction with user confirmation
def offer_automated_correction(violations: List[str]) -> None:
    """Offer to automatically correct naming violations."""
    
    for violation in violations:
        old_path, error = violation.split(': ', 1)
        new_path = suggest_correct_naming(Path(old_path).name, detect_artifact_type(old_path))
        
        print(f"🔧 Correction available: {old_path} → {new_path}")
        if user_confirms_correction():
            safely_rename_with_references(old_path, new_path)
```

## Integration Requirements

### 1. **Agile Automation Integration**
**MANDATORY**: Integrate with all agile automation tools

```python
# REQUIRED: Integration points
class AgileStoryAutomation:
    def create_story_file(self, story: UserStory) -> None:
        file_path = self.get_story_file_path(story)
        
        # MANDATORY: Validate naming convention
        enforce_naming_convention(file_path, "create")
        
        # Proceed with creation
        self._write_story_file(story, file_path)
```

### 2. **Rule System Integration**
**MANDATORY**: Apply to all rule-based operations

```yaml
rule_integration:
  file_organization:
    - "Include naming validation in file organization rules"
    - "Apply naming corrections during organization"
    
  agile_artifacts:
    - "Validate naming in artifact maintenance rules"
    - "Enforce naming in artifact creation rules"
    
  quality_assurance:
    - "Include naming checks in QA processes"
    - "Report naming violations in quality reports"
```

### 3. **Agent Behavior Requirements**
**MANDATORY**: All agents must follow naming enforcement

```yaml
agent_requirements:
  before_file_operations:
    - "MUST validate naming convention compliance"
    - "MUST reject operations violating naming standards"
    - "MUST suggest correct naming for violations"
    
  during_maintenance:
    - "MUST report discovered naming violations"
    - "MUST maintain compliant naming in all references"
    - "MUST update links when files are renamed"
    
  error_handling:
    - "MUST provide clear violation explanations"
    - "MUST offer specific correction suggestions"
    - "MUST prevent silent naming violations"
```

## Quality Gates

### 1. **Pre-Commit Validation**
**MANDATORY**: Validate naming before commits

```bash
# REQUIRED: Pre-commit hook
#!/bin/bash
python -c "
from utils.validation.naming_enforcement import validate_agile_artifacts
violations = validate_agile_artifacts('docs/agile/')
if violations:
    print('❌ NAMING VIOLATIONS DETECTED:')
    for v in violations: print(f'  {v}')
    exit(1)
print('✅ All agile artifacts follow naming conventions')
"
```

### 2. **Continuous Monitoring**
**MANDATORY**: Regular validation of naming compliance

```python
# REQUIRED: Continuous monitoring
def monitor_naming_compliance() -> Dict[str, Any]:
    """Monitor ongoing naming compliance."""
    
    report = {
        "compliance_rate": 0.0,
        "violations": [],
        "total_files": 0,
        "compliant_files": 0
    }
    
    all_files = scan_agile_artifacts("docs/agile/")
    report["total_files"] = len(all_files)
    
    for file_path in all_files:
        try:
            enforce_naming_convention(file_path, "validate")
            report["compliant_files"] += 1
        except NamingViolation as e:
            report["violations"].append(f"{file_path}: {e}")
    
    report["compliance_rate"] = report["compliant_files"] / report["total_files"]
    return report
```

## Success Metrics

### 1. **Compliance Targets**
- **100%** compliance with naming conventions
- **Zero** automation failures due to naming issues
- **Immediate** correction of any violations discovered
- **Preventive** validation blocks non-compliant creation

### 2. **Performance Indicators**
- **Reduced** time spent navigating artifacts
- **Improved** automation reliability
- **Enhanced** professional appearance
- **Eliminated** naming-related confusion

## Enforcement

This rule is **TIER 1 CRITICAL** and applies to:
- All agile artifact creation
- All agile artifact maintenance
- All automation script execution
- All file organization operations
- All quality assurance processes

**Violations require immediate correction and process review.**

## Remember

**"Consistent naming enables systematic excellence."**

**"Every artifact name should communicate its purpose immediately."**

**"Automation reliability depends on predictable naming patterns."**

**"Professional standards start with professional naming conventions."**