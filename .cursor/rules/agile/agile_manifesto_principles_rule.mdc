---
description: "Auto-generated description for agile_manifesto_principles_rule.mdc"
category: "agile-methodology"
priority: "high"
alwaysApply: false
contexts: ['AGILE', 'DEFAULT']
globs: ["**/*"]
tags: ['agile_methodology', 'agile', 'project_management']
tier: "2"
---
# Agile Manifesto Principles Rule

**CRITICAL**: All development activities must strictly adhere to the [Agile Manifesto Principles](https://agilemanifesto.org/principles.html) as the foundational guidelines for all work.

## Description
This rule enforces the 12 core principles from the Agile Manifesto, ensuring that all development work, processes, and decisions align with true agile methodology as defined by the original manifesto.

## 🏛️ **THE 12 AGILE MANIFESTO PRINCIPLES**

### **Principle 1: Customer Satisfaction Through Early and Continuous Delivery**
**"Our highest priority is to satisfy the customer through early and continuous delivery of valuable software."**

#### **Implementation Requirements**
```python
# MANDATORY: Customer value first approach
def validate_customer_value(task: str, deliverable: str) -> bool:
    """Validate that task delivers measurable customer value."""
    
    # Customer value criteria
    value_criteria = [
        "Solves real customer problem",
        "Provides measurable benefit", 
        "Deployable and usable",
        "Aligned with customer needs",
        "Delivers working software"
    ]
    
    return all(validate_criterion(deliverable, criterion) for criterion in value_criteria)

# CORRECT: Customer-focused development
def implement_customer_value_first(feature: str):
    """Implement feature with customer value as primary focus."""
    # 1. Validate customer value proposition
    # 2. Deliver minimal viable functionality first
    # 3. Deploy early and get feedback
    # 4. Iterate based on customer input
    pass

# INCORRECT: Technology-first development
def implement_technology_first(feature: str):
    """Implement feature focusing on technology over customer value."""
    # This violates Principle 1
    pass
```

#### **Automation Requirements**
- **Continuous Delivery Pipeline**: Automated deployment of working software
- **Customer Feedback Integration**: Automated collection and integration of customer feedback
- **Value Metrics Tracking**: Automated measurement of customer value delivery

### **Principle 3: Frequent Software Delivery**
**"Deliver working software frequently, from a couple of weeks to a couple of months, with a preference to the shorter timescale."**

#### **Implementation Requirements**
```python
# MANDATORY: Frequent delivery cycles
def enforce_frequent_delivery() -> bool:
    """Enforce frequent delivery of working software."""
    
    # Delivery frequency requirements
    max_delivery_cycle = 14  # days (2 weeks maximum)
    preferred_cycle = 7      # days (1 week preferred)
    
    current_cycle = get_current_delivery_cycle()
    
    if current_cycle > max_delivery_cycle:
        raise DeliveryFrequencyError(f"Delivery cycle too long: {current_cycle} days")
    
    return current_cycle <= preferred_cycle

# CORRECT: Short delivery cycles
def implement_weekly_delivery():
    """Implement weekly delivery of working software."""
    # 1. Daily integration
    # 2. Automated testing
    # 3. Automated deployment
    # 4. Working software validation
    # 5. Customer feedback collection
    pass

# INCORRECT: Long delivery cycles
def implement_quarterly_delivery():
    """Implement quarterly delivery cycles."""
    # This violates Principle 3
    pass
```

#### **Automation Requirements**
- **Daily Integration**: Automated continuous integration
- **Automated Deployment**: Push-button deployment capabilities
- **Delivery Metrics**: Automated tracking of delivery frequency

### **Principle 5: Motivated Individuals and Trust**
**"Build projects around motivated individuals. Give them the environment and support they need, and trust them to get the job done."**

#### **Implementation Requirements**
```python
# MANDATORY: Individual empowerment and trust
def empower_team_members() -> dict:
    """Empower team members with autonomy and support."""
    
    empowerment_elements = {
        "decision_autonomy": grant_decision_making_authority(),
        "tool_access": provide_necessary_tools(),
        "learning_support": enable_continuous_learning(),
        "environment_optimization": optimize_work_environment(),
        "trust_demonstration": demonstrate_trust_through_delegation()
    }
    
    return empowerment_elements

# CORRECT: Trust-based empowerment
def implement_trust_and_empowerment():
    """Implement trust-based team empowerment."""
    # 1. Delegate decision-making authority
    # 2. Provide necessary tools and resources
    # 3. Support continuous learning
    # 4. Remove bureaucratic obstacles
    # 5. Trust team judgment
    pass

# INCORRECT: Micromanagement approach
def implement_micromanagement():
    """Implement micromanagement and control."""
    # This violates Principle 5
    pass
```

#### **Automation Requirements**
- **Autonomous Decision Tools**: Tools that enable team decision-making
- **Resource Provisioning**: Automated provisioning of necessary resources
- **Learning Platform**: Automated access to learning resources

### **Principle 7: Working Software as Primary Progress Measure**
**"Working software is the primary measure of progress."**

#### **Implementation Requirements**
```python
# MANDATORY: Working software focus
def measure_progress_by_working_software() -> dict:
    """Measure progress primarily through working software delivery."""
    
    progress_metrics = {
        "working_features_completed": count_working_features(),
        "customer_value_delivered": measure_customer_value(),
        "software_functionality": assess_functionality(),
        "deployment_readiness": validate_deployment_readiness(),
        "user_acceptance": measure_user_acceptance()
    }
    
    # Working software metrics should dominate
    total_progress = calculate_weighted_progress(progress_metrics, {
        "working_features_completed": 0.4,
        "customer_value_delivered": 0.3,
        "software_functionality": 0.2,
        "deployment_readiness": 0.1
    })
    
    return total_progress

# CORRECT: Working software progress measurement
def track_working_software_progress():
    """Track progress through working software delivery."""
    # 1. Feature completion tracking
    # 2. Deployment readiness validation
    # 3. Customer value measurement
    # 4. Functionality assessment
    # 5. User acceptance testing
    pass

# INCORRECT: Documentation-based progress tracking
def track_documentation_progress():
    """Track progress through documentation completion."""
    # This violates Principle 7
    pass
```

#### **Automation Requirements**
- **Working Software Validation**: Automated validation of software functionality
- **Progress Dashboards**: Real-time dashboards showing working software progress
- **Deployment Metrics**: Automated tracking of deployment-ready features

### **Principle 9: Technical Excellence and Good Design**
**"Continuous attention to technical excellence and good design enhances agility."**

#### **Implementation Requirements**
```python
# MANDATORY: Technical excellence standards
def enforce_technical_excellence() -> bool:
    """Enforce continuous technical excellence and good design."""
    
    excellence_criteria = {
        "code_quality": assess_code_quality(),
        "design_patterns": validate_design_patterns(),
        "technical_debt": measure_technical_debt(),
        "test_coverage": calculate_test_coverage(),
        "performance": measure_performance_metrics(),
        "maintainability": assess_maintainability(),
        "security": validate_security_standards()
    }
    
    # Technical excellence thresholds
    quality_thresholds = {
        "code_quality": 8.0,      # 8/10 minimum
        "test_coverage": 0.9,     # 90% minimum
        "technical_debt": 0.1,    # 10% maximum
        "performance": 8.0,       # 8/10 minimum
        "maintainability": 8.0,   # 8/10 minimum
        "security": 9.0           # 9/10 minimum
    }
    
    return all(
        excellence_criteria[metric] >= threshold
        for metric, threshold in quality_thresholds.items()
        if metric != "technical_debt"
    ) and excellence_criteria["technical_debt"] <= quality_thresholds["technical_debt"]

# CORRECT: Technical excellence focus
def implement_technical_excellence():
    """Implement continuous technical excellence practices."""
    # 1. Test-driven development
    # 2. Continuous refactoring
    # 3. Code review processes
    # 4. Design pattern application
    # 5. Performance optimization
    # 6. Security best practices
    pass

# INCORRECT: Quick-and-dirty development
def implement_quick_and_dirty_development():
    """Implement development that sacrifices quality for speed."""
    # This violates Principle 9
    pass
```

#### **Automation Requirements**
- **Quality Gates**: Automated quality validation in CI/CD pipeline
- **Technical Debt Monitoring**: Automated tracking of technical debt
- **Performance Monitoring**: Automated performance testing and monitoring

### **Principle 11: Self-Organizing Teams**
**"The best architectures, requirements, and designs emerge from self-organizing teams."**

#### **Implementation Requirements**
```python
# MANDATORY: Self-organizing team principles
def enable_self_organization() -> dict:
    """Enable and support self-organizing team structures."""
    
    self_organization_elements = {
        "decision_autonomy": grant_team_decision_authority(),
        "architecture_ownership": enable_team_architecture_decisions(),
        "requirement_refinement": support_team_requirement_refinement(),
        "design_collaboration": facilitate_collaborative_design(),
        "process_adaptation": allow_process_customization()
    }
    
    # Measure self-organization effectiveness
    effectiveness_metrics = {
        "decision_speed": measure_decision_making_speed(),
        "solution_quality": assess_solution_quality(),
        "team_satisfaction": measure_team_satisfaction(),
        "innovation_rate": calculate_innovation_metrics()
    }
    
    return {
        "organization": self_organization_elements,
        "effectiveness": effectiveness_metrics
    }

# CORRECT: Self-organizing team support
def support_self_organization():
    """Support team self-organization principles."""
    # 1. Delegate architectural decisions to team
    # 2. Enable team requirement refinement
    # 3. Support collaborative design processes
    # 4. Allow process customization
    # 5. Provide autonomy with accountability
    pass

# INCORRECT: Top-down command and control
def implement_command_and_control():
    """Implement top-down decision making and control."""
    # This violates Principle 11
    pass
```

#### **Automation Requirements**
- **Decision Tracking**: Automated tracking of team decisions and outcomes
- **Collaboration Tools**: Tools that facilitate team self-organization
- **Autonomy Metrics**: Automated measurement of team autonomy and effectiveness

## **INTEGRATION WITH EXISTING RULES**

### **Rule Integration Matrix**
```yaml
# How Agile Manifesto principles integrate with existing Cursor rules
integration_mapping:
  principle_1_customer_satisfaction:
    - "development_core_principles_rule.mdc"
    - "agile_user_story_management_rule.mdc"
    
  principle_2_welcome_change:
    - "agile_sprint_management_rule.mdc"
    - "continuous_improvement_systematic_rule.mdc"
    
  principle_3_frequent_delivery:
    - "agile_daily_deployed_build_rule.mdc"
    - "automated_commit_rule.mdc"
    
  principle_4_daily_collaboration:
    - "agile_artifacts_maintenance_rule.mdc"
    
  principle_5_motivated_individuals:
    - "development_courage_completion_rule.mdc"
    - "boyscout_principle_rule.mdc"
    
  principle_6_face_to_face_communication:
    - "agile_artifacts_maintenance_rule.mdc"
    
  principle_7_working_software:
    - "no_failing_tests_rule.mdc"
    - "xp_test_first_development_rule.mdc"
    
  principle_8_sustainable_development:
    - "performance_monitoring_optimization_rule.mdc"
    
  principle_9_technical_excellence:
    - "code_review_quality_gates_rule.mdc"
    - "quality_validation_rule.mdc"
    
  principle_10_simplicity:
    - "anti_redundancy_elimination_rule.mdc"
    - "file_organization_cleanup_rule.mdc"
    
  principle_11_self_organizing_teams:
    - "metarule_holistic_boyscout_rule.mdc"
    
  principle_12_regular_reflection:
    - "continuous_improvement_systematic_rule.mdc"
```

## **VALIDATION AND COMPLIANCE**

### **Agile Manifesto Compliance Checker**
```python
# MANDATORY: Validate compliance with all 12 principles
def validate_agile_manifesto_compliance() -> dict:
    """Validate complete compliance with Agile Manifesto principles."""
    
    compliance_results = {}
    
    principles = [
        ("principle_1", validate_customer_satisfaction_priority),
        ("principle_2", validate_change_welcoming),
        ("principle_3", validate_frequent_delivery),
        ("principle_4", validate_daily_collaboration),
        ("principle_5", validate_motivated_individuals),
        ("principle_6", validate_face_to_face_communication),
        ("principle_7", validate_working_software_measure),
        ("principle_8", validate_sustainable_pace),
        ("principle_9", validate_technical_excellence),
        ("principle_10", validate_simplicity_focus),
        ("principle_11", validate_self_organization),
        ("principle_12", validate_regular_reflection)
    ]
    
    for principle_id, validator in principles:
        try:
            compliance_results[principle_id] = validator()
        except Exception as e:
            compliance_results[principle_id] = {
                "compliant": False,
                "error": str(e)
            }
    
    overall_compliance = all(
        result.get("compliant", False) 
        for result in compliance_results.values()
    )
    
    return {
        "overall_compliant": overall_compliance,
        "individual_results": compliance_results,
        "compliance_percentage": calculate_compliance_percentage(compliance_results)
    }
```

## **ENFORCEMENT**

This rule is **CONDITIONALLY APPLIED** based on context.

**Violations of any Agile Manifesto principle require immediate correction and process adjustment.**

### **Compliance Requirements**
- [ ] All 12 principles actively implemented
- [ ] Regular compliance validation performed
- [ ] Process adaptations based on principle violations
- [ ] Team training on manifesto principles
- [ ] Customer satisfaction prioritized in all decisions
- [ ] Working software delivered frequently
- [ ] Technical excellence maintained continuously
- [ ] Simplicity maximized in all work
- [ ] Self-organization supported and enabled
- [ ] Regular reflection and adaptation conducted

**Reference**: [Agile Manifesto Principles](https://agilemanifesto.org/principles.html)

description: "Auto-generated description"
globs: ["**/*"]
alwaysApply: false
---