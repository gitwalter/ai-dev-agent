---
name: Streamlit Secrets Management Rule
description: Always use Streamlit's `st.secrets` for loading API keys and sensitive configuration data. Never attempt to read TOML files directly or use custom TOML loaders.
globs:
alwaysApply: true
---

# Streamlit Secrets Management Rule

**CRITICAL**: Always use Streamlit's `st.secrets` for loading API keys and sensitive configuration data. Never attempt to read TOML files directly or use custom TOML loaders.

## Description
Always use Streamlit's `st.secrets` for loading API keys and sensitive configuration data. Never attempt to read TOML files directly or use custom TOML loaders.

## Core Requirements

### 1. API Key Loading
**MANDATORY**: Use `st.secrets` for all API key access
```python
# CORRECT: Use Streamlit secrets
import streamlit as st
api_key = st.secrets.get("GEMINI_API_KEY")

# INCORRECT: Direct TOML file reading
import tomllib
with open(".streamlit/secrets.toml", "rb") as f:
    secrets = tomllib.load(f)
    api_key = secrets.get("GEMINI_API_KEY")
```

### 2. Configuration Access
**MANDATORY**: Access all configuration through Streamlit secrets
```python
# CORRECT: Streamlit secrets access
gemini_api_key = st.secrets.get("GEMINI_API_KEY")
openai_api_key = st.secrets.get("OPENAI_API_KEY")
database_url = st.secrets.get("DATABASE_URL")

# INCORRECT: Direct file access
import toml
config = toml.load("config.toml")
```

### 3. Error Handling
**MANDATORY**: Implement proper error handling for secrets access
```python
try:
    api_key = st.secrets.get("GEMINI_API_KEY")
    if not api_key or api_key == "your-gemini-api-key-here":
        raise ValueError("Invalid or missing API key")
except Exception as e:
    print(f"Failed to load API key from Streamlit secrets: {e}")
    return False
```

## Implementation Guidelines

### 1. Test Files
**MANDATORY**: All test files must use `st.secrets`
```python
# In test files
import streamlit as st

def test_api_integration():
    api_key = st.secrets.get("GEMINI_API_KEY")
    if not api_key:
        pytest.skip("No API key available")
```

### 2. Application Files
**MANDATORY**: All application files must use `st.secrets`
```python
# In main application files
import streamlit as st

def initialize_llm():
    api_key = st.secrets.get("GEMINI_API_KEY")
    if not api_key:
        st.error("Missing Gemini API key in secrets")
        return None
```

### 3. Utility Functions
**MANDATORY**: Utility functions must use `st.secrets`
```python
# In utility files
import streamlit as st

def get_config():
    return {
        "gemini_api_key": st.secrets.get("GEMINI_API_KEY"),
        "model_name": st.secrets.get("MODEL_NAME", "gemini-2.5-flash-lite"),
        "max_tokens": st.secrets.get("MAX_TOKENS", 8192)
    }
```

## File Organization

### 1. Secrets File Location
**MANDATORY**: Keep secrets in `.streamlit/secrets.toml`
```toml
# .streamlit/secrets.toml
GEMINI_API_KEY = "your-actual-api-key-here"
OPENAI_API_KEY = "your-openai-key-here"
DATABASE_URL = "your-database-url-here"
```

### 2. Git Ignore
**MANDATORY**: Ensure `.streamlit/secrets.toml` is in `.gitignore`
```gitignore
# .gitignore
.streamlit/secrets.toml
```

## Testing Requirements

### 1. Test Environment
**MANDATORY**: Tests must handle missing secrets gracefully
```python
def test_with_secrets():
    try:
        api_key = st.secrets.get("GEMINI_API_KEY")
        if not api_key:
            pytest.skip("No API key available for testing")
    except Exception:
        pytest.skip("Streamlit secrets not available")
```

### 2. Mock Testing
**OPTIONAL**: Use mocks for testing without real secrets
```python
def test_with_mock_secrets(monkeypatch):
    monkeypatch.setattr(st.secrets, "get", lambda key: "mock-api-key")
    # Test with mock secrets
```

## Error Prevention

### 1. Common Mistakes to Avoid
- ❌ **Direct TOML file reading**: `import tomllib` or `import toml`
- ❌ **Custom TOML loaders**: Any custom TOML parsing utilities
- ❌ **Environment variable fallbacks**: Using `os.environ` as primary method
- ❌ **Hardcoded API keys**: Any hardcoded sensitive data

### 2. Required Patterns
- ✅ **Streamlit secrets**: `st.secrets.get("KEY_NAME")`
- ✅ **Error handling**: Try-catch blocks for secrets access
- ✅ **Validation**: Check for valid API keys
- ✅ **Graceful degradation**: Skip tests when secrets unavailable

## Documentation Requirements

### 1. Setup Instructions
**MANDATORY**: Document secrets setup in README
```markdown
## Setup

1. Create `.streamlit/secrets.toml`:
```toml
GEMINI_API_KEY = "your-actual-api-key-here"
```

2. Ensure `.streamlit/secrets.toml` is in `.gitignore`
```

### 2. Code Examples
**MANDATORY**: Include Streamlit secrets examples in documentation
```python
# Example: Loading API key
import streamlit as st

api_key = st.secrets.get("GEMINI_API_KEY")
if not api_key:
    st.error("Missing API key in secrets")
```

## Compliance Checklist

### Before Committing Code
- [ ] All API key access uses `st.secrets`
- [ ] No direct TOML file reading
- [ ] Proper error handling implemented
- [ ] Tests handle missing secrets gracefully
- [ ] Documentation updated with secrets setup
- [ ] `.streamlit/secrets.toml` in `.gitignore`

### Code Review Requirements
- [ ] Check for `tomllib` or `toml` imports
- [ ] Verify `st.secrets` usage
- [ ] Validate error handling
- [ ] Confirm no hardcoded secrets
- [ ] Review test secret handling

## Benefits

- **Security**: Centralized secrets management
- **Consistency**: Uniform approach across all files
- **Maintainability**: Single source of truth for configuration
- **Deployment**: Works seamlessly with Streamlit Cloud
- **Testing**: Proper test environment handling

## Enforcement

This rule is **ALWAYS APPLIED** and must be followed for all:
- New code development
- Existing code modifications
- Test file creation and updates
- Configuration management
- Documentation updates

**Violations of this rule require immediate remediation.**
