# Documentation Maintenance and Update Rule

## Description
All documentation must be kept up-to-date and synchronized with the current project structure, file organization, and codebase changes. This ensures accurate, reliable, and helpful documentation for users and developers.

## Documentation Update Requirements

### 1. When File Organization Changes

#### **MANDATORY Updates Required:**
- **README.md**: Update project structure section
- **Documentation references**: Update any hardcoded file paths
- **Import statements**: Update any documentation examples
- **Configuration files**: Update any path references
- **Test documentation**: Update test organization descriptions

#### **File Organization Changes Include:**
- Moving files to different directories
- Creating new directories
- Renaming files or directories
- Deleting files or directories
- Reorganizing project structure
- Adding new file types or categories

### 2. When Code Changes

#### **MANDATORY Updates Required:**
- **API Documentation**: Update function signatures and parameters
- **Configuration Documentation**: Update configuration options
- **Usage Examples**: Update code examples and snippets
- **Feature Documentation**: Update feature descriptions and capabilities
- **Installation Instructions**: Update setup and installation steps

#### **Code Changes Include:**
- Adding new functions or classes
- Modifying existing functions or classes
- Changing function signatures
- Adding new configuration options
- Removing deprecated features
- Changing default values or behavior

### 3. When Dependencies Change

#### **MANDATORY Updates Required:**
- **requirements.txt**: Update dependency list
- **Installation Instructions**: Update setup steps
- **Configuration Documentation**: Update dependency-related config
- **Troubleshooting**: Update common issues and solutions

#### **Dependency Changes Include:**
- Adding new dependencies
- Updating dependency versions
- Removing dependencies
- Changing dependency sources
- Adding optional dependencies

## Documentation Files to Maintain

### 1. Core Documentation Files

#### **README.md** (CRITICAL)
- Project overview and description
- Installation and setup instructions
- Usage examples and tutorials
- Project structure and organization
- Configuration options
- Troubleshooting guide
- Contributing guidelines

#### **IMPLEMENTATION_ROADMAP.md**
- Project development phases
- Task tracking and progress
- Current status and blockers
- Next steps and priorities
- Completed features and milestones

#### **Configuration Files**
- **requirements.txt**: Python dependencies
- **pytest.ini**: Test configuration
- **.gitignore**: Git ignore rules
- **.pre-commit-config.yaml**: Pre-commit hooks

### 2. Technical Documentation

#### **Architecture Documentation** (`docs/architecture/`)
- System architecture diagrams
- Component relationships
- Design patterns and principles
- Technology stack documentation
- Performance considerations

#### **API Documentation** (`docs/api/`)
- Function and class documentation
- Parameter descriptions
- Return value specifications
- Usage examples
- Error handling documentation

#### **User Guides** (`docs/user_guides/`)
- Step-by-step tutorials
- Feature walkthroughs
- Best practices
- Common use cases
- Troubleshooting guides

### 3. Development Documentation

#### **Development Setup** (`docs/development/`)
- Development environment setup
- Code style and standards
- Testing procedures
- Deployment instructions
- Contributing guidelines

#### **Analysis Documents** (`docs/analysis/`)
- Performance analysis
- Security analysis
- Code quality analysis
- Feature analysis
- Technical debt analysis

## Update Process

### 1. Before Making Changes

#### **Documentation Review**
- [ ] Review current documentation for accuracy
- [ ] Identify files that will be affected by changes
- [ ] Plan documentation updates needed
- [ ] Create documentation update checklist

#### **Impact Assessment**
- [ ] Identify all documentation references to changed files
- [ ] Check for hardcoded paths in documentation
- [ ] Review code examples in documentation
- [ ] Assess impact on user workflows

### 2. During Changes

#### **Synchronized Updates**
- [ ] Update documentation alongside code changes
- [ ] Test documentation examples after changes
- [ ] Verify file paths and references
- [ ] Update configuration examples

#### **Incremental Updates**
- [ ] Update documentation for each change
- [ ] Don't wait until all changes are complete
- [ ] Keep documentation current throughout development
- [ ] Test documentation accuracy regularly

### 3. After Making Changes

#### **Comprehensive Review**
- [ ] Review all documentation for accuracy
- [ ] Test all documentation examples
- [ ] Verify all file paths and references
- [ ] Check for broken links or references

#### **Validation**
- [ ] Run documentation tests if available
- [ ] Verify installation instructions work
- [ ] Test configuration examples
- [ ] Validate usage examples

## Documentation Standards

### 1. Content Standards

#### **Accuracy**
- All information must be current and accurate
- Code examples must be tested and working
- File paths must be correct and up-to-date
- Configuration examples must be valid

#### **Completeness**
- Cover all features and capabilities
- Include all configuration options
- Document all error conditions
- Provide comprehensive examples

#### **Clarity**
- Use clear, concise language
- Provide step-by-step instructions
- Include screenshots or diagrams when helpful
- Use consistent terminology

### 2. Structure Standards

#### **Organization**
- Use logical document structure
- Include table of contents for long documents
- Use consistent heading hierarchy
- Group related information together

#### **Navigation**
- Use clear section headings
- Include cross-references between documents
- Provide navigation aids
- Use consistent formatting

### 3. Maintenance Standards

#### **Version Control**
- Include documentation in code reviews
- Track documentation changes
- Version documentation with releases
- Maintain documentation history

#### **Review Process**
- Review documentation for accuracy
- Test documentation examples
- Validate technical details
- Check for completeness

## Specific Update Scenarios

### 1. File Organization Changes

#### **When Moving Files:**
```markdown
# BEFORE: Old structure
├── agents/
│   └── requirements_analyst.py
├── test_requirements_analyst.py  # ❌ Test file in root

# AFTER: New structure
├── agents/
│   └── requirements_analyst.py
├── tests/
│   └── unit/
│       └── test_requirements_analyst.py  # ✅ Test file in correct location
```

#### **Required Updates:**
- Update README.md project structure section
- Update any import examples in documentation
- Update test running instructions
- Update file path references

### 2. Code Changes

#### **When Adding New Features:**
```python
# BEFORE: Old function signature
def process_data(data: str) -> Dict[str, Any]:
    """Process input data."""
    pass

# AFTER: New function signature
def process_data(data: str, config: Optional[Dict] = None) -> Dict[str, Any]:
    """Process input data with optional configuration."""
    pass
```

#### **Required Updates:**
- Update function documentation
- Update usage examples
- Update API documentation
- Update configuration documentation

### 3. Configuration Changes

#### **When Adding New Configuration:**
```toml
# BEFORE: Old configuration
[gemini]
api_key = "your-key"

# AFTER: New configuration
[gemini]
api_key = "your-key"
model_name = "gemini-2.0-flash"
temperature = 0.1
```

#### **Required Updates:**
- Update configuration documentation
- Update installation instructions
- Update troubleshooting guide
- Update example configurations

## Quality Assurance

### 1. Documentation Testing

#### **Automated Testing**
- Test all code examples
- Validate configuration examples
- Check file paths and references
- Verify installation steps

#### **Manual Testing**
- Follow installation instructions
- Test usage examples
- Verify configuration options
- Check troubleshooting steps

### 2. Review Checklist

#### **Before Committing Documentation:**
- [ ] All information is current and accurate
- [ ] All code examples are tested
- [ ] All file paths are correct
- [ ] All configuration examples work
- [ ] All links and references are valid
- [ ] Documentation is complete and comprehensive
- [ ] Language is clear and consistent

#### **During Code Reviews:**
- [ ] Documentation is updated for code changes
- [ ] New features are documented
- [ ] Breaking changes are documented
- [ ] Migration guides are provided if needed
- [ ] Examples are updated and tested

### 3. Maintenance Schedule

#### **Regular Maintenance**
- **Weekly**: Review documentation for accuracy
- **Monthly**: Comprehensive documentation review
- **Per Release**: Update all documentation
- **Per Major Change**: Immediate documentation update

#### **Triggered Maintenance**
- **File Organization Changes**: Immediate update required
- **Code Changes**: Synchronized update required
- **Dependency Changes**: Immediate update required
- **User Feedback**: Address documentation issues promptly

## Benefits

- **User Experience**: Accurate documentation improves user experience
- **Developer Productivity**: Clear documentation speeds up development
- **Maintenance**: Well-documented code is easier to maintain
- **Onboarding**: Good documentation helps new team members
- **Quality**: Documentation review catches issues early
- **Professionalism**: Complete documentation reflects project quality

## Enforcement

- **ALWAYS** update documentation with code changes
- **NEVER** commit code changes without documentation updates
- **VERIFY** documentation accuracy before releasing
- **REVIEW** documentation in code reviews
- **TEST** documentation examples regularly
- **MAINTAIN** documentation as part of development workflow

## Examples

### Good Documentation Update
```markdown
# Updated README.md section after file reorganization

## Project Structure

### Organized File Structure

The project follows a clean, organized structure:

```
ai-dev-agent/
├── agents/                 # Agent implementations
├── tests/                 # Comprehensive test suite
│   ├── unit/             # Unit tests
│   ├── integration/      # Integration tests
│   └── system/           # System tests
├── docs/                 # Documentation
│   ├── analysis/         # Analysis documents
│   ├── architecture/     # Architecture docs
│   └── concept_papers/   # Concept papers
└── [other directories]
```

### Test Organization

- **Unit Tests** (`tests/unit/`): Individual component testing
- **Integration Tests** (`tests/integration/`): Component interaction testing
- **System Tests** (`tests/system/`): End-to-end workflow testing
```

### Bad Documentation (Outdated)
```markdown
# Outdated README.md section

## Project Structure

```
ai-dev-agent/
├── agents/
├── test_requirements_analyst.py  # ❌ Outdated - file was moved
├── agent_framework_analysis.md   # ❌ Outdated - file was moved
└── [other files]
```

## Running Tests

```bash
# ❌ Outdated - test file was moved
python test_requirements_analyst.py
```
```

## Conclusion

Maintaining accurate, up-to-date documentation is essential for project success. This rule ensures that documentation stays synchronized with code changes and provides users with reliable, helpful information.

**CRITICAL SUCCESS FACTORS:**
- Update documentation alongside code changes
- Test all documentation examples
- Verify all file paths and references
- Maintain comprehensive coverage
- Review documentation regularly
- Include documentation in code reviews
description:
globs:
alwaysApply: true
---
