# Standardized Meaningful Naming Standards Rule

**CRITICAL**: All project elements must follow standardized, meaningful naming conventions. This rule ensures consistency, clarity, and maintainability across the entire codebase.

## Core Naming Principles

### 1. Meaningful and Descriptive Names
- **ALWAYS** use names that clearly describe purpose and functionality
- **NEVER** use abbreviations unless they are universally understood
- **ALWAYS** prioritize clarity over brevity
- **NEVER** use single-letter variables except in mathematical contexts (i, j, k for loops)

### 2. Consistency Across All Elements
- **UNIFORM PATTERNS**: Use consistent naming patterns across similar elements
- **LANGUAGE STANDARDS**: Follow language-specific naming conventions
- **DOMAIN TERMINOLOGY**: Use consistent domain-specific terminology
- **HIERARCHICAL STRUCTURE**: Maintain logical naming hierarchy

## File and Directory Naming Standards

### 1. File Naming Conventions
```
# CORRECT: Descriptive, consistent file names
requirements_analyst.py          # Agent implementation
test_requirements_analyst.py     # Test file
requirements_analysis.md         # Documentation
config_database.py              # Configuration
api_client.py                   # API utilities
workflow_manager.py             # Workflow management

# INCORRECT: Unclear or inconsistent names
req_analyst.py                  # Abbreviated
test_req.py                     # Unclear abbreviation
req_analysis.md                 # Inconsistent abbreviation
db_config.py                    # Inconsistent order
api.py                          # Too generic
workflow.py                     # Too generic
```

### 2. Directory Naming Standards
```
# CORRECT: Clear, hierarchical directory names
agents/                         # Agent implementations
├── requirements_analyst.py
├── architecture_designer.py
└── code_generator.py

tests/                          # Test organization
├── unit/                       # Unit tests
├── integration/                # Integration tests
├── system/                     # System tests
└── fixtures/                   # Test fixtures

docs/                           # Documentation
├── architecture/               # Architecture docs
├── api/                        # API documentation
└── user_guides/                # User guides

# INCORRECT: Unclear or inconsistent directory names
agent/                          # Singular vs plural
├── req_analyst.py             # Abbreviated
├── arch_designer.py           # Abbreviated
└── code_gen.py                # Abbreviated

test/                           # Singular
├── unit_tests/                # Redundant
├── int_tests/                 # Abbreviated
└── sys_tests/                 # Abbreviated
```

### 3. Cursor Rules Naming Standards
```
# CORRECT: category_action_rule.mdc format
testing_isolated_agent_testing_rule.mdc
project_implementation_roadmap_rule.mdc
debugging_agent_flow_analysis_rule.mdc
security_streamlit_secrets_rule.mdc
prompt_prompt_database_management_rule.mdc

# INCORRECT: Inconsistent formats
test-isolation.mdc              # Hyphens instead of underscores
agent-flow-analysis.mdc         # Hyphens, no category
no-failing-tests.mdc            # Hyphens, unclear category
model-selection.mdc             # Hyphens, no category
```

## Code Naming Standards

### 1. Function and Method Naming
```python
# CORRECT: Clear, action-oriented function names
def analyze_project_requirements(requirements_text: str) -> Dict[str, Any]:
    """Analyze project requirements and extract key information."""
    pass

def generate_architecture_design(requirements: Dict) -> Dict[str, Any]:
    """Generate system architecture based on requirements."""
    pass

def validate_input_state(state: Dict[str, Any]) -> bool:
    """Validate the input state for agent execution."""
    pass

def create_llm_model(task_complexity: str) -> ChatGoogleGenerativeAI:
    """Create appropriate LLM model based on task complexity."""
    pass

# INCORRECT: Unclear or inconsistent function names
def analyze_req(req_text: str) -> Dict[str, Any]:  # Abbreviated
    pass

def gen_arch(req: Dict) -> Dict[str, Any]:         # Abbreviated
    pass

def check_state(state: Dict[str, Any]) -> bool:    # Vague action
    pass

def get_model(complexity: str) -> ChatGoogleGenerativeAI:  # Too generic
    pass
```

### 2. Class Naming Standards
```python
# CORRECT: Clear, descriptive class names
class RequirementsAnalyst:
    """Agent for analyzing project requirements."""
    pass

class ArchitectureDesigner:
    """Agent for designing system architecture."""
    pass

class WorkflowManager:
    """Manages multi-agent workflow execution."""
    pass

class PromptDatabaseManager:
    """Manages prompt database operations."""
    pass

class OutputParser:
    """Parses and validates LLM outputs."""
    pass

# INCORRECT: Unclear or inconsistent class names
class ReqAnalyst:                # Abbreviated
    pass

class ArchDesigner:              # Abbreviated
    pass

class Workflow:                  # Too generic
    pass

class PromptDB:                  # Abbreviated
    pass

class Parser:                    # Too generic
    pass
```

### 3. Variable Naming Standards
```python
# CORRECT: Clear, descriptive variable names
project_requirements = "Create a task management system"
architecture_design = generate_architecture(project_requirements)
generated_code = create_implementation(architecture_design)
test_results = run_test_suite(generated_code)
api_response = call_llm_api(prompt_text)
parsed_output = parse_structured_response(api_response)

# INCORRECT: Unclear or abbreviated variable names
req = "Create a task management system"           # Abbreviated
arch = generate_architecture(req)                 # Abbreviated
code = create_implementation(arch)                # Too generic
results = run_test_suite(code)                    # Too generic
response = call_llm_api(prompt)                   # Too generic
output = parse_structured_response(response)      # Too generic
```

### 4. Constant Naming Standards
```python
# CORRECT: Clear, descriptive constant names
DEFAULT_MODEL_NAME = "gemini-2.5-flash-lite"
MAX_TOKEN_LIMIT = 8192
DEFAULT_TEMPERATURE = 0.1
API_TIMEOUT_SECONDS = 30
MAX_RETRY_ATTEMPTS = 3
DEFAULT_BATCH_SIZE = 10

# INCORRECT: Unclear or abbreviated constant names
MODEL = "gemini-2.5-flash-lite"                   # Too generic
MAX_TOKENS = 8192                                 # Abbreviated
TEMP = 0.1                                        # Abbreviated
TIMEOUT = 30                                      # Too generic
RETRIES = 3                                       # Too generic
BATCH = 10                                        # Too generic
```

## Configuration and Environment Naming

### 1. Environment Variables
```bash
# CORRECT: Clear, descriptive environment variables
GEMINI_API_KEY=your_api_key_here
DATABASE_CONNECTION_STRING=postgresql://user:pass@host:port/db
LOG_LEVEL=INFO
ENVIRONMENT=production
DEBUG_MODE=false

# INCORRECT: Unclear or abbreviated environment variables
API_KEY=your_api_key_here                        # Too generic
DB_URL=postgresql://user:pass@host:port/db       # Abbreviated
LOG=INFO                                         # Too generic
ENV=production                                   # Abbreviated
DEBUG=false                                      # Too generic
```

### 2. Configuration Files
```toml
# CORRECT: Clear, descriptive configuration
[gemini]
api_key = "your-gemini-api-key-here"
model_name = "gemini-2.5-flash-lite"
temperature = 0.1
max_tokens = 8192

[database]
connection_string = "postgresql://user:pass@host:port/db"
pool_size = 10
timeout_seconds = 30

# INCORRECT: Unclear or abbreviated configuration
[gemini]
key = "your-gemini-api-key-here"                 # Too generic
model = "gemini-2.5-flash-lite"                  # Too generic
temp = 0.1                                        # Abbreviated
tokens = 8192                                     # Too generic

[db]
url = "postgresql://user:pass@host:port/db"       # Abbreviated
pool = 10                                         # Too generic
timeout = 30                                      # Too generic
```

## Database and API Naming Standards

### 1. Database Table and Column Names
```sql
-- CORRECT: Clear, descriptive database names
CREATE TABLE project_requirements (
    id SERIAL PRIMARY KEY,
    requirement_text TEXT NOT NULL,
    priority_level INTEGER,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE agent_executions (
    execution_id UUID PRIMARY KEY,
    agent_name VARCHAR(100) NOT NULL,
    execution_status VARCHAR(50),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);

-- INCORRECT: Unclear or abbreviated database names
CREATE TABLE reqs (                               -- Abbreviated
    id SERIAL PRIMARY KEY,
    req_text TEXT NOT NULL,                      -- Abbreviated
    priority INTEGER,                            -- Too generic
    created TIMESTAMP DEFAULT CURRENT_TIMESTAMP, -- Abbreviated
    updated TIMESTAMP DEFAULT CURRENT_TIMESTAMP  -- Abbreviated
);

CREATE TABLE execs (                              -- Abbreviated
    exec_id UUID PRIMARY KEY,                    -- Abbreviated
    agent VARCHAR(100) NOT NULL,                 -- Too generic
    status VARCHAR(50),                          -- Too generic
    start TIMESTAMP,                             -- Too generic
    end TIMESTAMP                                -- Too generic
);
```

### 2. API Endpoint Naming
```python
# CORRECT: Clear, descriptive API endpoints
@app.route('/api/v1/project-requirements', methods=['GET'])
def get_project_requirements():
    pass

@app.route('/api/v1/agent-executions', methods=['POST'])
def create_agent_execution():
    pass

@app.route('/api/v1/workflow-status/<workflow_id>', methods=['GET'])
def get_workflow_status(workflow_id):
    pass

# INCORRECT: Unclear or abbreviated API endpoints
@app.route('/api/v1/reqs', methods=['GET'])       # Abbreviated
def get_reqs():
    pass

@app.route('/api/v1/execs', methods=['POST'])     # Abbreviated
def create_exec():
    pass

@app.route('/api/v1/status/<id>', methods=['GET']) # Too generic
def get_status(id):
    pass
```

## Documentation Naming Standards

### 1. Documentation File Names
```
# CORRECT: Clear, descriptive documentation names
README.md                           # Main project documentation
API_DOCUMENTATION.md               # API documentation
ARCHITECTURE_OVERVIEW.md           # Architecture documentation
DEPLOYMENT_GUIDE.md                # Deployment instructions
TROUBLESHOOTING_GUIDE.md           # Troubleshooting documentation
CONTRIBUTING_GUIDELINES.md         # Contributing guidelines

# INCORRECT: Unclear or abbreviated documentation names
readme.md                          # Inconsistent capitalization
api_docs.md                        # Abbreviated
arch.md                            # Abbreviated
deploy.md                          # Abbreviated
troubleshoot.md                    # Abbreviated
contributing.md                    # Abbreviated
```

### 2. Documentation Section Names
```markdown
# CORRECT: Clear, descriptive section names
## Project Overview
## Installation and Setup
## Usage Examples
## Configuration Options
## Troubleshooting Guide
## Contributing Guidelines

# INCORRECT: Unclear or abbreviated section names
## Overview                    # Too generic
## Setup                       # Abbreviated
## Usage                       # Too generic
## Config                      # Abbreviated
## Troubleshooting             # Inconsistent
## Contributing                # Inconsistent
```

## Testing Naming Standards

### 1. Test File and Function Names
```python
# CORRECT: Clear, descriptive test names
def test_requirements_analyst_initialization():
    """Test RequirementsAnalyst initialization."""
    pass

def test_architecture_designer_generates_valid_design():
    """Test ArchitectureDesigner generates valid architecture design."""
    pass

def test_workflow_manager_handles_error_conditions():
    """Test WorkflowManager handles error conditions properly."""
    pass

def test_output_parser_validates_structured_response():
    """Test OutputParser validates structured responses correctly."""
    pass

# INCORRECT: Unclear or abbreviated test names
def test_init():                                    # Too generic
    pass

def test_gen_design():                              # Abbreviated
    pass

def test_errors():                                  # Too generic
    pass

def test_parse():                                   # Too generic
    pass
```

### 2. Test Data and Fixture Names
```python
# CORRECT: Clear, descriptive test data names
sample_project_requirements = "Create a task management system"
valid_architecture_design = {
    "components": ["frontend", "backend", "database"],
    "technologies": ["React", "Node.js", "PostgreSQL"]
}
mock_llm_response = {
    "content": "Generated code implementation",
    "status": "success"
}

# INCORRECT: Unclear or abbreviated test data names
req = "Create a task management system"             # Abbreviated
arch = {"components": ["frontend", "backend"]}     # Abbreviated
response = {"content": "Generated code"}            # Too generic
```

## Enforcement and Validation

### 1. Automated Naming Validation
```python
# Naming validation function
def validate_naming_standards(file_path: str) -> List[str]:
    """Validate naming standards for a given file."""
    violations = []
    
    # Check file naming
    if not file_path.endswith('.py'):
        if '_' not in os.path.basename(file_path):
            violations.append(f"File name should use underscores: {file_path}")
    
    # Check for abbreviations
    common_abbreviations = ['req', 'arch', 'config', 'api', 'db', 'url', 'id']
    for abbrev in common_abbreviations:
        if abbrev in file_path.lower():
            violations.append(f"File contains abbreviation: {abbrev}")
    
    return violations
```

### 2. Code Review Checklist
- [ ] All file names follow naming conventions
- [ ] All function names are descriptive and action-oriented
- [ ] All class names are clear and descriptive
- [ ] All variable names are meaningful
- [ ] No abbreviations unless universally understood
- [ ] Consistent naming patterns across similar elements
- [ ] Domain terminology is used consistently

### 3. Naming Standards Documentation
```markdown
# Naming Standards Reference

## File Naming
- Use underscores for word separation: `requirements_analyst.py`
- Be descriptive and specific: `test_requirements_analyst.py`
- Use consistent patterns: `{category}_{action}_{type}.py`

## Function Naming
- Use action-oriented names: `analyze_requirements()`
- Be specific about functionality: `validate_input_state()`
- Use consistent verb patterns: `create_`, `validate_`, `generate_`

## Class Naming
- Use PascalCase: `RequirementsAnalyst`
- Be descriptive: `ArchitectureDesigner`
- Use consistent patterns: `{Domain}{Role}`

## Variable Naming
- Use snake_case: `project_requirements`
- Be descriptive: `generated_architecture_design`
- Avoid abbreviations: `requirements` not `reqs`
```

## Benefits

- **Consistency**: Uniform naming across the entire project
- **Clarity**: Clear understanding of purpose and functionality
- **Maintainability**: Easier to understand and modify code
- **Collaboration**: Better team communication and understanding
- **Documentation**: Self-documenting code through naming
- **Debugging**: Easier to trace issues through clear naming
- **Onboarding**: Faster learning curve for new team members

## Enforcement

This rule is **ALWAYS APPLIED** and must be followed for all:
- File and directory creation
- Function and method naming
- Class and variable naming
- Configuration and environment setup
- Database and API design
- Documentation creation
- Test development

**Violations of this rule require immediate remediation and renaming.**

## Success Metrics

- **Naming Consistency**: 100% adherence to naming standards
- **Code Clarity**: Improved code readability scores
- **Maintenance Efficiency**: Reduced time spent understanding code
- **Team Productivity**: Faster onboarding and development
- **Documentation Quality**: Self-documenting code through naming
- **Error Reduction**: Fewer naming-related bugs and confusion
description:
globs:
alwaysApply: true
---
