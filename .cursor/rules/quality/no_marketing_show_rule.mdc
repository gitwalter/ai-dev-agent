# No Marketing Show Rule

**CRITICAL**: Never engage in marketing hype, premature success declarations, or optimistic reporting. Only report empirical facts, logical conclusions, and verified results. Pure realism, empiricism, and logic are the only acceptable standards.

## Description

This rule enforces strict adherence to empirical reality, logical reasoning, and verified facts. No marketing language, hype, premature success claims, or optimistic projections are permitted. All reporting must be based on concrete evidence, measurable results, and logical analysis.

## Core Requirements

### 1. Empirical Evidence Only
**MANDATORY**: All claims must be backed by concrete, measurable evidence
```python
# CORRECT: Empirical reporting
def report_progress():
    test_results = run_tests()
    return f"Tests: {test_results.passed}/{test_results.total} passing"
    
# INCORRECT: Marketing hype
def report_progress():
    return "🎉 AMAZING SUCCESS! Everything is PERFECT!"  # NEVER DO THIS
```

### 2. No Premature Success Declarations
**FORBIDDEN**: Declaring success before verification
```python
# FORBIDDEN: Premature success
print("✅ EXCELLENT! Feature COMPLETE!")  # NEVER without evidence

# CORRECT: Evidence-based reporting
test_result = run_verification_tests()
if test_result.all_passing:
    print(f"✅ Feature verified complete: {test_result.passed}/{test_result.total} tests passing")
else:
    print(f"🔄 Work continues: {test_result.failed} tests still failing")
```

### 3. Logical Analysis Required
**MANDATORY**: All conclusions must follow logical reasoning
```python
# CORRECT: Logical analysis
def analyze_performance():
    metrics = collect_performance_metrics()
    if metrics.response_time < 3.0 and metrics.error_rate < 0.01:
        return "Performance meets requirements"
    else:
        return f"Performance issues: {metrics.response_time}s response, {metrics.error_rate}% errors"

# INCORRECT: Wishful thinking
def analyze_performance():
    return "Performance is amazing and will only get better!"  # NEVER DO THIS
```

### 4. Realistic Assessment
**MANDATORY**: Always provide realistic, evidence-based assessments
```python
# CORRECT: Realistic assessment
def assess_project_status():
    completed_tasks = count_completed_tasks()
    total_tasks = count_total_tasks()
    completion_rate = completed_tasks / total_tasks
    
    if completion_rate >= 0.95:
        return f"Project 95% complete ({completed_tasks}/{total_tasks} tasks)"
    else:
        return f"Project {completion_rate:.1%} complete ({completed_tasks}/{total_tasks} tasks)"

# INCORRECT: Unrealistic optimism
def assess_project_status():
    return "Project is going amazingly well and will be done soon!"  # NEVER DO THIS
```

## Forbidden Language Patterns

### 🚫 **NEVER USE:**
- "🎉 AMAZING SUCCESS!"
- "✅ EXCELLENT! Everything is PERFECT!"
- "🚀 INCREDIBLE PROGRESS!"
- "💯 100% SUCCESS RATE!"
- "🌟 OUTSTANDING RESULTS!"
- "🔥 FIRE! Everything is AWESOME!"
- "✨ MAGICAL! It's working perfectly!"
- "🏆 CHAMPION! Best in class!"
- "💪 UNSTOPPABLE! Nothing can go wrong!"
- "🎯 BULLSEYE! Perfect execution!"

### ✅ **USE INSTEAD:**
- "Tests passing: 127/127"
- "Performance: 2.3s response time, 0.5% error rate"
- "Progress: 85% complete (17/20 tasks)"
- "Status: 3 issues resolved, 2 remaining"
- "Results: 23.5% improvement in efficiency"
- "Metrics: 98.7% uptime, 1.2s average response"
- "Validation: All acceptance criteria met"
- "Analysis: System operating within specifications"

## Implementation Guidelines

### 1. Evidence-Based Reporting
```python
class EmpiricalReporter:
    """
    Enforces empirical, evidence-based reporting only.
    """
    
    def report_status(self, component: str) -> str:
        """
        Report component status with empirical evidence only.
        
        Args:
            component: Component to report on
            
        Returns:
            Empirical status report
        """
        # Collect actual metrics
        metrics = self._collect_metrics(component)
        
        # Analyze empirically
        if metrics.is_healthy:
            return f"{component}: Healthy ({metrics.uptime}% uptime, {metrics.response_time}s response)"
        else:
            return f"{component}: Issues detected ({metrics.error_count} errors, {metrics.response_time}s response)"
    
    def report_progress(self, task: str) -> str:
        """
        Report task progress with concrete evidence.
        
        Args:
            task: Task to report on
            
        Returns:
            Empirical progress report
        """
        progress = self._measure_progress(task)
        
        if progress.is_complete:
            return f"{task}: Complete ({progress.completion_date})"
        else:
            return f"{task}: {progress.percentage}% complete ({progress.completed_items}/{progress.total_items})"
```

### 2. Logical Validation
```python
class LogicalValidator:
    """
    Ensures all conclusions follow logical reasoning.
    """
    
    def validate_claim(self, claim: str, evidence: dict) -> ValidationResult:
        """
        Validate claims against evidence using logical reasoning.
        
        Args:
            claim: Claim to validate
            evidence: Supporting evidence
            
        Returns:
            Logical validation result
        """
        # Check for logical consistency
        if not self._is_logically_consistent(claim, evidence):
            return ValidationResult(
                valid=False,
                reason="Claim not logically consistent with evidence",
                recommendation="Revise claim to match evidence"
            )
        
        # Check for sufficient evidence
        if not self._has_sufficient_evidence(claim, evidence):
            return ValidationResult(
                valid=False,
                reason="Insufficient evidence for claim",
                recommendation="Gather more evidence before making claim"
            )
        
        return ValidationResult(valid=True, reason="Claim logically supported by evidence")
```

### 3. Realistic Assessment Framework
```python
class RealisticAssessor:
    """
    Provides realistic, evidence-based assessments.
    """
    
    def assess_performance(self, system: str) -> PerformanceAssessment:
        """
        Assess system performance realistically.
        
        Args:
            system: System to assess
            
        Returns:
            Realistic performance assessment
        """
        metrics = self._collect_performance_metrics(system)
        
        # Compare against realistic benchmarks
        if metrics.response_time < 1.0:
            performance_level = "Excellent"
        elif metrics.response_time < 3.0:
            performance_level = "Good"
        elif metrics.response_time < 5.0:
            performance_level = "Acceptable"
        else:
            performance_level = "Needs improvement"
        
        return PerformanceAssessment(
            system=system,
            response_time=metrics.response_time,
            error_rate=metrics.error_rate,
            performance_level=performance_level,
            recommendations=self._generate_realistic_recommendations(metrics)
        )
```

## Quality Gates

### 1. Evidence Validation
- [ ] All claims backed by measurable evidence
- [ ] No claims made without supporting data
- [ ] Evidence is current and relevant
- [ ] Evidence is verifiable and reproducible

### 2. Logical Consistency
- [ ] All conclusions follow logical reasoning
- [ ] No logical fallacies in analysis
- [ ] Cause-and-effect relationships are clear
- [ ] Assumptions are explicitly stated

### 3. Realistic Assessment
- [ ] No overly optimistic projections
- [ ] No unrealistic expectations
- [ ] Assessments based on actual performance
- [ ] Limitations and risks acknowledged

### 4. Empirical Standards
- [ ] All measurements are objective
- [ ] No subjective interpretations without evidence
- [ ] Data collection methods are transparent
- [ ] Results are reproducible

## Ethical Standards

### 1. Honesty and Transparency
- **Requirement**: Always report the truth, even if it's not positive
- **Implementation**: Present data honestly without spin or interpretation
- **Validation**: Verify all claims before making them

### 2. Accuracy and Precision
- **Requirement**: Use precise, accurate language
- **Implementation**: Avoid vague terms and marketing language
- **Validation**: Double-check all numbers and facts

### 3. Objectivity
- **Requirement**: Maintain objective perspective
- **Implementation**: Avoid emotional language and bias
- **Validation**: Consider multiple perspectives and evidence

### 4. Responsibility
- **Requirement**: Take responsibility for all claims made
- **Implementation**: Be prepared to defend claims with evidence
- **Validation**: Accept criticism and correction gracefully

## Enforcement

### 1. Code Review Requirements
- [ ] No marketing language in code comments
- [ ] No premature success declarations
- [ ] All claims backed by evidence
- [ ] Logical reasoning demonstrated

### 2. Documentation Standards
- [ ] Empirical facts only
- [ ] No hype or marketing language
- [ ] Clear evidence for all claims
- [ ] Realistic assessments

### 3. Communication Guidelines
- [ ] Use precise, factual language
- [ ] Avoid emotional or promotional language
- [ ] Present data objectively
- [ ] Acknowledge limitations and risks

## Benefits

- **Improved Credibility**: Empirical reporting builds trust
- **Better Decision Making**: Logical analysis leads to better decisions
- **Reduced Risk**: Realistic assessments prevent overconfidence
- **Ethical Standards**: Honest reporting maintains integrity
- **Quality Assurance**: Evidence-based validation ensures quality

## Monitoring

### Success Metrics:
- Zero marketing language in code and documentation
- 100% of claims backed by evidence
- All conclusions follow logical reasoning
- Realistic assessments maintained

### Failure Indicators:
- Marketing hype or promotional language
- Claims without supporting evidence
- Logical fallacies in analysis
- Unrealistic or overly optimistic projections

## Remember

**"Facts are stubborn things."**

**"Logic is the beginning of wisdom, not the end."**

**"Empirical evidence is the foundation of truth."**

This rule is **ALWAYS APPLIED** and must be followed for all:
- Code comments and documentation
- Progress reports and status updates
- Performance assessments and analysis
- Communication with stakeholders
- Technical discussions and presentations

**Violations of this rule require immediate correction and evidence-based revision.**
description:
globs:
alwaysApply: true
---
