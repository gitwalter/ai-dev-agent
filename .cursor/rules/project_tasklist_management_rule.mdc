---
name: Tasklist Management
description:
globs:
alwaysApply: true
---

# Tasklist Management Rule

**CRITICAL**: Always maintain a consistent, up-to-date tasklist that aligns with the overall project roadmap, implementation roadmap, and test development plan. This ensures continuity between different Cursor agents and prevents work duplication or misalignment.

## Core Tasklist Management Requirements

### 1. Tasklist Structure and Location
- **PRIMARY TASKLIST**: `docs/guides/implementation/roadmap.md` - Main project tasklist
- **TEST TASKLIST**: `tests/langgraph/TEST_DEVELOPMENT_PLAN.md` - Test-specific tasks
- **ARCHITECTURE DOCS**: `SUPERVISOR_SWARM_HYBRID_ARCHITECTURE.md` - Architecture tasks
- **MIGRATION PLAN**: `docs/concepts/migration/framework_migration.md` - Migration-specific tasks

### 2. Tasklist Update Requirements

#### Before Starting Any Work
- [ ] **Review Current Tasklist**: Read all roadmap documents to understand current state
- [ ] **Check Progress**: Verify what has been completed and what's in progress
- [ ] **Identify Next Steps**: Determine the next logical tasks based on dependencies
- [ ] **Update Status**: Mark completed tasks and update progress percentages

#### During Work Execution
- [ ] **Track Progress**: Update task status as work progresses
- [ ] **Document Blockers**: Note any issues or dependencies that block progress
- [ ] **Record Decisions**: Document important technical decisions and their rationale
- [ ] **Update Metrics**: Maintain accurate completion percentages and metrics

#### After Completing Work
- [ ] **Mark Complete**: Update task status to completed
- [ ] **Update Progress**: Recalculate overall project progress
- [ ] **Document Results**: Record outcomes, metrics, and any lessons learned
- [ ] **Identify Next Tasks**: Determine and document the next priority tasks

### 3. Tasklist Alignment Requirements

#### Roadmap Consistency
- **IMPLEMENTATION_ROADMAP.md**: Must reflect current implementation status
- **TEST_DEVELOPMENT_PLAN.md**: Must align with test coverage and quality goals
- **AGENT_FRAMEWORK_MIGRATION_PLAN.md**: Must track migration progress
- **SUPERVISOR_SWARM_HYBRID_ARCHITECTURE.md**: Must reflect architecture evolution

#### Cross-Reference Validation
- [ ] **Dependency Check**: Ensure task dependencies are correctly identified
- [ ] **Timeline Alignment**: Verify task timelines align across documents
- [ ] **Resource Consistency**: Check that resource requirements are consistent
- [ ] **Quality Gates**: Ensure quality gates and acceptance criteria are defined

### 4. Task Status Management

#### Required Task Statuses
- **NOT_STARTED**: Task not yet begun
- **IN_PROGRESS**: Task currently being worked on
- **BLOCKED**: Task blocked by dependencies or issues
- **COMPLETED**: Task finished and validated
- **DEFERRED**: Task postponed to later phase
- **CANCELLED**: Task no longer needed

#### Status Update Requirements
- **Timestamps**: Include date/time of status changes
- **Responsibility**: Note who is working on each task
- **Progress Notes**: Document specific progress made
- **Blockers**: Detail any blocking issues or dependencies

### 5. Progress Tracking and Metrics

#### Required Metrics
- **Overall Progress**: Percentage complete across all phases
- **Phase Progress**: Individual phase completion percentages
- **Test Coverage**: Test development and execution progress
- **Quality Metrics**: Code quality, test pass rates, performance
- **Migration Progress**: Framework migration completion status

#### Metric Update Frequency
- **Daily**: Update progress during active development
- **Weekly**: Comprehensive progress review and planning
- **Milestone**: Major milestone completion updates
- **Release**: Pre-release status validation

### 6. Tasklist Documentation Standards

#### Task Documentation Requirements
- **Clear Description**: Unambiguous task description
- **Acceptance Criteria**: Specific criteria for task completion
- **Dependencies**: Clear list of prerequisite tasks
- **Effort Estimate**: Time/effort required for completion
- **Priority Level**: High/Medium/Low priority classification
- **Assigned To**: Who is responsible for the task

#### Documentation Quality
- **Consistency**: Use consistent terminology and format
- **Completeness**: Include all necessary information
- **Clarity**: Write in clear, unambiguous language
- **Maintainability**: Structure for easy updates and maintenance

### 7. Continuity Between Agents

#### Handoff Requirements
- **Current State**: Document exact current state of all tasks
- **Active Work**: Note what's currently being worked on
- **Next Priorities**: Clearly identify next 3-5 priority tasks
- **Blockers**: Document any current blockers or issues
- **Context**: Provide sufficient context for next agent

#### Knowledge Transfer
- **Technical Decisions**: Document important technical decisions
- **Lessons Learned**: Record insights and lessons from completed work
- **Best Practices**: Note any best practices discovered
- **Troubleshooting**: Document solutions to common issues

### 8. Tasklist Validation and Quality Assurance

#### Validation Checklist
- [ ] **Completeness**: All required tasks are documented
- [ ] **Accuracy**: Task status reflects actual progress
- [ ] **Consistency**: Information is consistent across documents
- [ ] **Dependencies**: Task dependencies are correctly identified
- [ ] **Timeline**: Timeline estimates are realistic and aligned
- [ ] **Resources**: Resource requirements are accurately estimated

#### Quality Gates
- **Documentation Quality**: All tasks have clear descriptions and criteria
- **Progress Accuracy**: Progress percentages reflect actual completion
- **Dependency Validation**: All dependencies are correctly mapped
- **Timeline Realism**: Timeline estimates are achievable
- **Resource Adequacy**: Required resources are available

### 9. Tasklist Maintenance Workflow

#### Regular Maintenance Schedule
- **Daily**: Update active task progress
- **Weekly**: Comprehensive review and planning
- **Bi-weekly**: Major milestone assessment
- **Monthly**: Strategic roadmap review and adjustment

#### Maintenance Activities
- **Progress Updates**: Update completion status and percentages
- **Dependency Review**: Check and update task dependencies
- **Timeline Adjustment**: Revise timelines based on actual progress
- **Resource Reallocation**: Adjust resource assignments as needed
- **Quality Assessment**: Review and improve task documentation

### 10. Emergency and Exception Handling

#### Emergency Updates
- **Critical Issues**: Immediately update tasklist for critical problems
- **Blockers**: Document blockers that prevent progress
- **Scope Changes**: Update tasks for significant scope changes
- **Resource Changes**: Adjust for resource availability changes

#### Exception Documentation
- **Deviation Reasons**: Document why tasks deviate from plan
- **Impact Assessment**: Assess impact of changes on overall timeline
- **Mitigation Plans**: Develop plans to address deviations
- **Communication**: Ensure all stakeholders are informed

### 11. Tasklist Tools and Automation

#### Recommended Tools
- **Markdown**: Use markdown for tasklist documentation
- **Version Control**: Track changes in git
- **Progress Tracking**: Use consistent progress indicators
- **Automation**: Automate progress calculations where possible

#### Automation Requirements
- **Progress Calculation**: Automate overall progress calculation
- **Dependency Validation**: Automate dependency checking
- **Status Updates**: Automate status change tracking
- **Report Generation**: Automate progress report generation

### 12. Communication and Stakeholder Management

#### Stakeholder Communication
- **Regular Updates**: Provide regular progress updates to stakeholders
- **Milestone Reports**: Generate milestone completion reports
- **Risk Communication**: Communicate risks and blockers promptly
- **Change Management**: Communicate scope or timeline changes

#### Communication Standards
- **Frequency**: Regular communication schedule
- **Format**: Consistent communication format
- **Content**: Include progress, blockers, and next steps
- **Escalation**: Clear escalation path for issues

## Implementation Checklist

### Initial Setup
- [ ] Review all existing roadmap documents
- [ ] Validate current task status and progress
- [ ] Identify gaps or inconsistencies in tasklists
- [ ] Establish baseline metrics and progress tracking
- [ ] Set up regular maintenance schedule

### Ongoing Maintenance
- [ ] Update task status daily during active development
- [ ] Conduct weekly comprehensive reviews
- [ ] Validate progress accuracy and completeness
- [ ] Update dependencies and timelines as needed
- [ ] Communicate progress to stakeholders

### Quality Assurance
- [ ] Validate tasklist completeness and accuracy
- [ ] Check consistency across all roadmap documents
- [ ] Verify dependency mapping and timeline alignment
- [ ] Review and improve task documentation quality
- [ ] Ensure handoff readiness for next agent

## Benefits

- **Continuity**: Seamless handoff between different Cursor agents
- **Alignment**: Consistent alignment with project goals and roadmaps
- **Efficiency**: Reduced duplication and misalignment of work
- **Transparency**: Clear visibility into project progress and status
- **Quality**: Better task documentation and progress tracking
- **Risk Management**: Early identification and mitigation of issues

## Enforcement

This rule is **ALWAYS APPLIED** and must be followed for all:
- Task planning and execution
- Progress tracking and reporting
- Handoff preparation and execution
- Roadmap maintenance and updates
- Stakeholder communication
- Quality assurance activities

**Violations of this rule require immediate remediation and tasklist correction.**

## Success Metrics

- **Tasklist Accuracy**: 95%+ accuracy in task status and progress
- **Handoff Quality**: 100% successful handoffs between agents
- **Progress Tracking**: Real-time accurate progress tracking
- **Documentation Quality**: High-quality, maintainable task documentation
- **Stakeholder Satisfaction**: Positive stakeholder feedback on progress communication
