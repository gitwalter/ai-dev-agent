---
description: "Research-first principle with clear detection criteria for when research is needed across all agents"
category: "core-foundation"
priority: "critical"
alwaysApply: true
globs: ["**/*"]
tags: ['core_foundation', 'research', 'knowledge_management', 'efficiency']
tier: "1"
---

# Research-First Principle

**CRITICAL**: All agents must research current best practices and proven techniques before implementation, but only when clear criteria indicate research is necessary. Smart agents avoid redundant research through systematic knowledge validation.

## Core Principle

**"Research When Needed, Act When Ready"**

Every agent must follow the hybrid bio-machine SENSE → THINK → ACT paradigm, where SENSE includes intelligent research decision-making based on precise detection criteria.

## Research Necessity Detection Criteria

### Automatic Research Triggers
**MANDATORY**: Research is required when ANY of these criteria are met:

```yaml
research_required_when:
  knowledge_gaps:
    - "No existing knowledge for the specific domain/technology"
    - "Agent encounters unfamiliar requirements or tasks"
    - "Available information is ambiguous or incomplete"
    
  temporal_factors:
    - "Knowledge is outdated (pre-2024 for rapidly evolving fields)"
    - "Technology/framework has major updates since last research"
    - "Industry standards have changed significantly"
    
  scope_expansion:
    - "Current requirements exceed existing knowledge scope"
    - "New complexity levels not previously encountered"
    - "Integration requirements beyond current expertise"
    
  risk_factors:
    - "High-risk or complex scenarios requiring validation"
    - "Security implications not previously assessed"
    - "Performance requirements significantly changed"
    - "Compliance or regulatory requirements involved"
    
  stakeholder_validation:
    - "Stakeholder feedback indicates knowledge gaps"
    - "User requirements contradict existing assumptions"
    - "External validation required for critical decisions"
```

### Research NOT Required When
**EFFICIENCY OPTIMIZATION**: Skip research when ALL of these are true:

```yaml
research_not_needed_when:
  knowledge_current:
    - "Existing knowledge is current (2024+ for relevant domains)"
    - "Agent has successfully applied knowledge recently"
    - "No significant changes in domain since last research"
    
  scope_covered:
    - "Current requirements fully covered by existing knowledge"
    - "Similar problems solved successfully before"
    - "No new complexity or risk factors introduced"
    
  validation_complete:
    - "Knowledge already validated through successful implementation"
    - "Stakeholder requirements align with existing knowledge"
    - "Security and performance implications well understood"
```

## Agent Detection Implementation

### Knowledge Base Check Protocol
**MANDATORY**: Every agent must implement this check before any action:

```python
def research_necessity_check(self, task: Task, context: Context) -> ResearchDecision:
    """
    Determine if research is necessary using formal criteria.
    
    Returns:
        ResearchDecision with research_required boolean and reasoning
    """
    
    # Step 1: Knowledge Gap Analysis
    knowledge_gaps = self._assess_knowledge_gaps(task, context)
    if knowledge_gaps.has_critical_gaps:
        return ResearchDecision(
            research_required=True,
            reason="KNOWLEDGE_GAPS",
            details=knowledge_gaps.gap_details
        )
    
    # Step 2: Temporal Validation
    temporal_check = self._validate_knowledge_currency(task.domain)
    if not temporal_check.is_current:
        return ResearchDecision(
            research_required=True,
            reason="OUTDATED_KNOWLEDGE",
            details=temporal_check.outdated_areas
        )
    
    # Step 3: Scope Coverage Analysis
    scope_check = self._assess_scope_coverage(task, context)
    if not scope_check.fully_covered:
        return ResearchDecision(
            research_required=True,
            reason="SCOPE_EXPANSION",
            details=scope_check.uncovered_areas
        )
    
    # Step 4: Risk Factor Assessment
    risk_check = self._assess_risk_factors(task, context)
    if risk_check.requires_validation:
        return ResearchDecision(
            research_required=True,
            reason="RISK_FACTORS",
            details=risk_check.risk_areas
        )
    
    # Step 5: Stakeholder Validation Check
    stakeholder_check = self._assess_stakeholder_requirements(task, context)
    if stakeholder_check.validation_needed:
        return ResearchDecision(
            research_required=True,
            reason="STAKEHOLDER_VALIDATION",
            details=stakeholder_check.validation_areas
        )
    
    # All checks passed - research not required
    return ResearchDecision(
        research_required=False,
        reason="KNOWLEDGE_SUFFICIENT",
        details="Existing knowledge covers all requirements"
    )
```

### Research Quality Standards
**MANDATORY**: When research is required, follow these standards:

```yaml
research_standards:
  authoritative_sources_required:
    - "Official documentation (always check first)"
    - "Industry standards (IEEE, OWASP, NIST, RFC)"
    - "Proven frameworks with track records"
    - "Community consensus (Stack Overflow, GitHub, peer review)"
    - "Academic research (peer-reviewed papers)"
    - "Current year industry reports (2024+)"
  
  research_scope_requirements:
    - "Multiple sources (never single-source decisions)"
    - "Current year focus (prioritize 2024+ information)"
    - "Practical validation (real-world implementation examples)"
    - "Security considerations (always research security implications)"
    - "Performance impact (research performance characteristics)"
    - "Community adoption (check adoption rates and support)"
  
  forbidden_research_practices:
    - "Outdated information without validation"
    - "Single-source decisions"
    - "Unverified claims without evidence"
    - "Deprecated practices"
    - "Security-ignorant implementations"
```

## Agent-Specific Implementation

### @engineering Agents
```yaml
engineering_research_criteria:
  triggers:
    - "New programming language or framework"
    - "Unfamiliar design patterns or architectures"
    - "Performance optimization requirements"
    - "Security vulnerability concerns"
    - "Testing methodology updates"
  
  research_focus:
    - "Current language standards and idioms"
    - "Framework best practices and updates"
    - "Security vulnerability databases"
    - "Performance optimization techniques"
    - "Testing methodologies and tools"
```

### @architecture Agents
```yaml
architecture_research_criteria:
  triggers:
    - "New architectural patterns required"
    - "Scalability requirements beyond experience"
    - "Integration with unfamiliar systems"
    - "Compliance requirements"
    - "Technology stack changes"
  
  research_focus:
    - "Current architectural patterns"
    - "Scalability and reliability patterns"
    - "Security architecture frameworks"
    - "Integration standards"
    - "Cloud-native design principles"
```

### @debug Agents
```yaml
debug_research_criteria:
  triggers:
    - "Unfamiliar error patterns"
    - "New debugging tools required"
    - "Performance profiling needs"
    - "Complex system interactions"
    - "Unknown failure modes"
  
  research_focus:
    - "Debugging methodologies"
    - "Error analysis techniques"
    - "Performance profiling tools"
    - "System monitoring approaches"
    - "Root cause analysis frameworks"
```

### @agile Agents
```yaml
agile_research_criteria:
  triggers:
    - "New agile methodologies"
    - "Team dynamics challenges"
    - "Process optimization needs"
    - "Tool integration requirements"
    - "Metrics and measurement updates"
  
  research_focus:
    - "Current agile methodologies"
    - "Team collaboration best practices"
    - "Process optimization techniques"
    - "Agile tooling and automation"
    - "Metrics and measurement approaches"
```

## Implementation Framework

### Research Decision Algorithm
```python
class ResearchFirstPrinciple:
    """
    Implementation of research-first principle with detection criteria.
    """
    
    def __init__(self):
        self.knowledge_base = AgentKnowledgeBase()
        self.criteria_engine = ResearchCriteriaEngine()
        self.research_executor = ResearchExecutor()
    
    def execute_principle(self, task: Task, context: Context) -> ActionPlan:
        """
        Execute research-first principle with detection criteria.
        
        Args:
            task: Current task requiring execution
            context: Development/operational context
            
        Returns:
            ActionPlan with research phase if needed, then action phase
        """
        
        # SENSE: Assess research necessity
        research_decision = self.criteria_engine.assess_research_necessity(
            task, context, self.knowledge_base
        )
        
        action_plan = ActionPlan()
        
        if research_decision.research_required:
            # THINK: Plan research phase
            research_plan = self.research_executor.create_research_plan(
                research_decision, task, context
            )
            action_plan.add_phase(research_plan)
            
            # Execute research
            research_results = self.research_executor.execute_research(research_plan)
            
            # Update knowledge base
            self.knowledge_base.update(research_results)
        
        # ACT: Execute main task with available knowledge
        execution_plan = self.create_execution_plan(task, context, self.knowledge_base)
        action_plan.add_phase(execution_plan)
        
        return action_plan
```

### Integration with Context System
**MANDATORY**: Integrate with existing context-aware rule system:

```yaml
context_integration:
  DEFAULT_context:
    - "Apply research criteria for general tasks"
    - "Research when unfamiliar with domain"
    - "Validate knowledge currency"
  
  CODING_context:
    - "Research programming language best practices"
    - "Research framework updates and security"
    - "Research testing methodologies"
  
  ARCHITECTURE_context:
    - "Research architectural patterns"
    - "Research scalability approaches"
    - "Research integration standards"
  
  DEBUGGING_context:
    - "Research debugging methodologies"
    - "Research error analysis techniques"
    - "Research profiling tools"
```

## Quality Assurance

### Detection Criteria Validation
**MANDATORY**: Ensure detection criteria work correctly:

```python
def validate_detection_criteria():
    """Validate that research detection criteria work correctly."""
    
    test_cases = [
        # Should trigger research
        ("Unknown technology", True),
        ("Outdated knowledge (2020)", True),
        ("High security risk", True),
        ("Stakeholder concerns", True),
        
        # Should not trigger research
        ("Recently researched domain", False),
        ("Well-known stable technology", False),
        ("Low risk routine task", False),
        ("Validated knowledge", False)
    ]
    
    for case, expected in test_cases:
        result = research_necessity_check(case)
        assert result.research_required == expected
```

### Efficiency Metrics
**MANDATORY**: Track research efficiency:

```yaml
efficiency_metrics:
  research_accuracy: "Percentage of research decisions that were correct"
  time_saved: "Time saved by avoiding unnecessary research"
  knowledge_reuse: "Percentage of tasks using existing knowledge"
  research_quality: "Quality and applicability of research conducted"
  decision_speed: "Time taken to make research decisions"
```

## Enforcement

This rule is **TIER 1 CRITICAL** and applies to:
- All agent types (@engineering, @architecture, @debug, @agile, @security, @testing)
- All task execution before implementation
- All knowledge-dependent decision making
- All problem-solving and solution development

### Compliance Checklist
- [ ] Research necessity assessed using formal criteria
- [ ] Knowledge base checked before research
- [ ] Research quality standards followed when research needed
- [ ] Multiple authoritative sources consulted (when researching)
- [ ] Knowledge base updated with research results
- [ ] Decision reasoning documented
- [ ] Efficiency metrics tracked

## Benefits

### **Efficiency Optimization**
- Avoid redundant research when knowledge is sufficient
- Focus research effort where truly needed
- Optimize agent performance and response time
- Reduce cognitive load and resource usage

### **Quality Assurance**
- Ensure decisions based on current, accurate knowledge
- Maintain high standards through systematic validation
- Prevent errors from outdated or insufficient knowledge
- Enable continuous learning and improvement

### **System Reliability**
- Consistent approach across all agents
- Predictable decision-making process
- Clear criteria eliminate guesswork
- Systematic knowledge management

## Remember

**"Research when needed, act when ready"**

**"Smart detection prevents redundant effort"**

**"Quality knowledge enables quality decisions"**

**"Systematic criteria ensure consistent excellence"**

This principle ensures all agents research efficiently - when needed, but not when redundant - while maintaining the highest quality standards.