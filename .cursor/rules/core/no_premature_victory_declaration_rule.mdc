---
alwaysApply: true
autoFix: true
category: foundational-axiomatic
contexts:
- ALL
dependencies:
- safety_first_principle
description: Evidence-Based Success Validation - axiomatic layer rule
enforcement: blocking
formalLayer: axiomatic
globs:
- '**/*'
languageGames:
- evidence_validation
- truth_verification
linguisticFramework: foundational
logicalType: 0
priority: critical
tags:
- axiomatic
- foundational
- type_0
- priority_1
- evidence_validation
- truth_verification
tier: '1'
---
# Scientific Verification and Evidence-Based Success Rule

**CRITICAL**: All claims, completions, and success declarations must be formally verified through systematic evidence collection and scientific validation. Zero tolerance for unverified assertions, marketing language, or premature victory declarations.

## Description
This rule prevents premature declarations of success, completion, or victory before proper validation and testing has been performed. All claims must be backed by concrete evidence. Additionally, all outputs must be concise and focused only on progress-relevant information to improve speed and efficiency.

## Core Requirements

### 1. Validation Before Declaration
**MANDATORY**: Never declare success without completing ALL validation steps
```bash
# FORBIDDEN: Declaring success without testing
echo "‚úÖ **EXCELLENT! Feature COMPLETE!**"  # NEVER do this without proof

# CORRECT: Test first, then declare
python -m pytest tests/ --tb=short
if [ $? -eq 0 ]; then
    echo "‚úÖ Tests passing - feature verified complete"
else
    echo "‚ùå Tests failing - work continues"
fi
```

### 2. Evidence-Based Claims
**MANDATORY**: All success claims must include concrete evidence
```bash
# REQUIRED EVIDENCE:
# - Test execution results (exit codes, pass/fail counts)
# - System status checks (health monitoring results)
# - Actual output verification (not assumed)
# - Performance metrics (response times, error rates)
# - Complete workflow execution (end-to-end validation)
```

### 3. Concise Progress Reporting
**MANDATORY**: Output only progress-relevant information for speed optimization
```python
# CORRECT: Concise progress reporting
def report_progress():
    test_results = run_tests()
    if test_results.failed > 0:
        return f"‚ùå {test_results.failed} tests failing"
    else:
        return f"‚úÖ All {test_results.passed} tests passing"

# FORBIDDEN: Verbose unnecessary output
def report_progress():
    print("Starting comprehensive analysis...")
    print("Initializing test framework...")
    print("Loading configuration files...")
    # ... unnecessary verbose output
    return "‚úÖ Feature complete!"  # Without testing
```

### 4. Success Criteria Definition
**MANDATORY**: Define clear, measurable success criteria before starting
```yaml
# REQUIRED: Define success criteria upfront
success_criteria:
  - "All tests pass (0 failures, 0 errors)"
  - "System health: 100% healthy agents"
  - "Performance: <3s response times"
  - "Code quality: No linting errors"
  - "Full workflow execution: End-to-end success"
```

### 5. Verification Commands
**MANDATORY**: Use these verification patterns before any success declaration
```bash
# Complete test suite verification
python -m pytest tests/ -v --tb=short --maxfail=5

# System health verification  
python scripts/health_monitor_service.py --check

# Code quality verification
python -m pylint src/ --errors-only
python -m flake8 src/ --count --max-line-length=120

# Performance verification
time python -c "import your_module; your_module.run_performance_test()"
```

## Forbidden Phrases

### üö´ **NEVER USE WITHOUT EVIDENCE:**
- "‚úÖ **EXCELLENT! [Feature] COMPLETE!**"
- "üéâ **SUCCESS!**"
- "Perfect! Everything is working!"
- "All issues are resolved!"
- "System is fully operational!"
- "100% success rate achieved!"
- "Mission accomplished!"
- "Feature ready for production!"

### ‚úÖ **USE INSTEAD (CONCISE):**
- "‚úÖ Tests passing (127/127)"
- "üéØ 95% complete, 1 test remaining"
- "‚ö†Ô∏è Main feature working, edge cases need fixes"
- "üìä 6/7 agents healthy, investigating 1 failure"
- "üîÑ Import errors fixed, validation errors remain"

## Concise Communication Requirements

### 1. Progress-Only Output
**MANDATORY**: Focus output on actionable progress information
```python
# CORRECT: Concise progress focus
def update_status(component: str, status: str, details: str = None):
    """Report only essential progress information."""
    output = f"{status} {component}"
    if details and len(details) < 50:  # Only brief details
        output += f" - {details}"
    print(output)

# FORBIDDEN: Verbose non-essential output
def update_status_verbose(component: str, status: str):
    """Verbose status reporting."""
    print(f"=== STATUS UPDATE REPORT ===")
    print(f"Component: {component}")
    print(f"Timestamp: {datetime.now()}")
    print(f"Previous status: {get_previous_status()}")
    print(f"Current status: {status}")
    print(f"=== END REPORT ===")
```

### 2. Eliminate Redundant Information
**MANDATORY**: Remove repetitive or obvious information
```python
# CORRECT: Essential information only
"Creating file X"
"File X created"
"Tests: 5 pass, 1 fail"

# FORBIDDEN: Redundant verbose output
"Now I will create file X for you"
"I am in the process of creating file X"
"File X has been successfully created and is now available"
"Running comprehensive test suite analysis..."
"Test execution completed with the following detailed results..."
```

### 3. Speed Optimization Through Brevity
**MANDATORY**: Optimize for reading speed and cognitive load
```yaml
# REQUIRED: Concise communication patterns
concise_patterns:
  status_updates: "Component: Status"
  progress_reports: "X/Y complete"
  error_reports: "Error: brief description"
  success_reports: "‚úÖ Component verified"
  
# FORBIDDEN: Verbose patterns
verbose_patterns:
  - "I am pleased to report that..."
  - "The system has successfully completed..."
  - "After careful analysis and consideration..."
  - "Let me provide you with a comprehensive update..."
```

## Implementation Guidelines

### 1. Test-Driven Validation
```python
# MANDATORY: Always verify with actual tests
def validate_feature_completion():
    # Run comprehensive tests
    test_results = subprocess.run(['python', '-m', 'pytest', 'tests/', '-v'], 
                                  capture_output=True, text=True)
    
    if test_results.returncode != 0:
        return False, f"Tests failing: {count_failures(test_results.stdout)}"
    
    # Additional validations...
    health_check = check_system_health()
    if not health_check.all_healthy:
        return False, f"System issues: {health_check.issue_count}"
    
    return True, "All validations passed"

# Only declare success after validation
is_complete, message = validate_feature_completion()
if is_complete:
    print(f"‚úÖ Feature complete: {message}")
else:
    print(f"üîÑ Work continues: {message}")
```

### 2. Concise Progress Tracking
```python
# CORRECT: Brief, actionable progress updates
def report_current_status():
    status = {
        "tests_failing": count_failing_tests(),
        "agents_healthy": count_healthy_agents(),
        "linting_errors": count_linting_errors()
    }
    
    if status["tests_failing"] > 0:
        print(f"üîÑ {status['tests_failing']} tests failing")
    elif status["linting_errors"] > 0:
        print(f"‚ö†Ô∏è Tests pass, {status['linting_errors']} lint errors")
    else:
        print(f"‚úÖ All validations complete")
```

### 3. Evidence Documentation
```python
# MANDATORY: Document evidence for success claims
def document_success_evidence(feature: str, evidence: dict):
    """Document concrete evidence for success claims."""
    
    evidence_summary = {
        "feature": feature,
        "tests_passed": evidence.get("test_count", 0),
        "coverage": evidence.get("coverage", 0),
        "performance": evidence.get("response_time", "N/A"),
        "timestamp": datetime.now().isoformat()
    }
    
    # Brief evidence log
    print(f"‚úÖ {feature}: {evidence_summary['tests_passed']} tests, "
          f"{evidence_summary['coverage']}% coverage")
    
    return evidence_summary
```

## Error Handling and Rollback

### 1. Immediate Correction
**MANDATORY**: If premature victory is declared, immediately correct it
```python
# If you catch yourself declaring premature victory:
def correct_premature_declaration():
    print("‚ùå CORRECTION: Previous success claim was premature")
    print("üîÑ Returning to validation")
    
    # Immediately run actual verification
    actual_status = run_comprehensive_validation()
    print(f"üìä Actual status: {actual_status}")
```

### 2. Validation Enforcement
```python
# MANDATORY: Enforce validation before any completion claims
def enforce_validation_before_completion(task: str):
    """Ensure validation occurs before declaring completion."""
    
    # Check if validation has been run
    if not has_validation_been_run(task):
        raise ValidationError(f"Cannot declare {task} complete without validation")
    
    # Check if validation passed
    validation_results = get_validation_results(task)
    if not validation_results.all_passed:
        raise ValidationError(f"Validation failed for {task}: {validation_results.failures}")
    
    return True
```

## Quality Assurance

### 1. Evidence Requirements
**MANDATORY**: All success declarations must include:
- Test execution results with pass/fail counts
- System health check results
- Performance metrics within acceptable ranges
- Code quality metrics meeting standards
- Complete workflow execution confirmation

### 2. Conciseness Requirements
**MANDATORY**: All communications must be:
- Under 100 words for status updates
- Under 50 words for progress reports
- Under 20 words for simple confirmations
- Focused only on actionable information
- Free of redundant or obvious statements

### 3. Speed Optimization
**MANDATORY**: Optimize for:
- Rapid cognitive processing
- Immediate actionability
- Essential information only
- Reduced reading time
- Faster decision making

## Enforcement

This rule is **CONDITIONALLY APPLIED** based on context.

### Compliance Checklist
- [ ] No success claims without concrete evidence
- [ ] Test results provided for all completion claims
- [ ] System status verified before operational claims
- [ ] All communications under word limits
- [ ] Only progress-relevant information included
- [ ] No redundant or verbose explanations
- [ ] Evidence-based validation completed

### Violation Consequences
**Immediate correction required for:**
- Any success claim without supporting evidence
- Verbose output exceeding conciseness requirements
- Premature victory declarations
- Unvalidated completion statements

## Benefits

- **Improved Reliability**: No false claims about system status
- **Enhanced Speed**: Concise communication improves processing time
- **Better Debugging**: Honest assessment reveals actual issues
- **Quality Assurance**: Forces proper validation before declaring success
- **Cognitive Efficiency**: Reduced information overload
- **Faster Decision Making**: Essential information only
- **Reduced Communication Overhead**: Focus on actionable content

## Remember

**"It's not done until it's tested and verified."**

**"Measure twice, declare once."**

**"Evidence first, celebration second."**

**"Concise is precise."**

**"Progress over prose."**

This rule is **CRITICAL** and must be followed for all development work, testing, validation, and communication activities.

**Violations require immediate correction and re-validation.**

description: Prevents premature success declarations and enforces concise progress-focused communication
globs: ["**/*"]
alwaysApply: false
---