# File Organization and Cleanup Rule

**CRITICAL**: Always maintain a clean, organized file structure by automatically deleting empty files and organizing code according to established patterns.

## Description
This rule ensures the repository maintains proper file organization, eliminates empty/unnecessary files, and follows consistent project structure patterns.

## Core Requirements

### 1. Empty File Management
**MANDATORY**: Always delete empty files immediately upon detection
```bash
# CORRECT: Delete empty files
if [ ! -s "filename.py" ]; then
    rm "filename.py"
    echo "Deleted empty file: filename.py"
fi

# FORBIDDEN: Keeping empty files
touch empty_file.py  # Never create or leave empty files
```

### 2. File Organization Standards
**MANDATORY**: Follow established directory structure patterns
```
project_root/
├── src/                    # Source code
├── tests/                  # All test files
├── docs/                   # Documentation
├── scripts/                # Utility scripts
├── utils/                  # Utility modules
├── models/                 # Data models
├── agents/                 # Agent implementations
├── workflow/               # Workflow management
└── monitoring/             # Monitoring and observability
```

### 3. Test File Organization
**MANDATORY**: All test files must be in the `tests/` directory
```python
# CORRECT: Test files in proper location
tests/
├── unit/                   # Unit tests
├── integration/            # Integration tests
├── langgraph/             # LangGraph-specific tests
├── system/                # System tests
├── security/              # Security tests
├── performance/           # Performance tests
├── mocks/                 # Mock objects and utilities
├── fixtures/              # Test fixtures
└── config/                # Test configuration

# FORBIDDEN: Test files in wrong locations
# ❌ test_something.py (in root)
# ❌ src/test_module.py
# ❌ agents/test_agent.py
```

### 4. File Naming Conventions
**MANDATORY**: Use consistent, descriptive file names
```python
# CORRECT: Descriptive, consistent naming
test_workflow_integration.py
langgraph_workflow_manager.py
requirements_analyst.py
system_health_monitor.py

# FORBIDDEN: Vague or inconsistent naming
test.py
temp.py
untitled.py
file1.py
```

### 5. Automatic Cleanup Patterns
**MANDATORY**: Implement automatic cleanup for common file types
```bash
# Files to always delete if empty
EMPTY_FILE_PATTERNS=(
    "*.py"      # Python files
    "*.js"      # JavaScript files
    "*.ts"      # TypeScript files
    "*.md"      # Markdown files
    "*.txt"     # Text files
    "*.json"    # JSON files
    "*.yaml"    # YAML files
    "*.yml"     # YAML files
    "*.toml"    # TOML files
)

# Temporary files to always delete
TEMP_FILE_PATTERNS=(
    "*.tmp"
    "*.temp"
    "*.swp"
    "*.swo"
    "*.bak"
    "*.backup"
    "*~"
    ".DS_Store"
)
```

### 6. File Movement and Organization
**MANDATORY**: Move misplaced files to correct locations
```python
# File type → Correct directory mapping
FILE_ORGANIZATION = {
    "test_*.py": "tests/",
    "*_test.py": "tests/",
    "test*.py": "tests/",
    "agent_*.py": "agents/",
    "*_agent.py": "agents/",
    "workflow_*.py": "workflow/",
    "*_workflow.py": "workflow/",
    "model_*.py": "models/",
    "*_model.py": "models/",
    "util_*.py": "utils/",
    "*_util.py": "utils/",
    "*_utils.py": "utils/",
    "monitor_*.py": "monitoring/",
    "*_monitor.py": "monitoring/",
    "*.md": "docs/" if not in_root_or_project_specific_location
}
```

## Implementation Guidelines

### 1. Pre-commit File Cleanup
**MANDATORY**: Clean up files before any commit
```python
def cleanup_before_commit():
    """Clean up repository before committing."""
    # 1. Delete empty files
    delete_empty_files()
    
    # 2. Remove temporary files
    remove_temp_files()
    
    # 3. Organize misplaced files
    organize_misplaced_files()
    
    # 4. Validate file structure
    validate_file_organization()
    
    # 5. Update .gitignore if needed
    update_gitignore()
```

### 2. Empty File Detection
**MANDATORY**: Detect and handle empty files
```python
def delete_empty_files():
    """Delete all empty files in the repository."""
    import os
    import glob
    
    for pattern in EMPTY_FILE_PATTERNS:
        for file_path in glob.glob(f"**/{pattern}", recursive=True):
            if os.path.isfile(file_path) and os.path.getsize(file_path) == 0:
                os.remove(file_path)
                print(f"🗑️ Deleted empty file: {file_path}")
```

### 3. File Movement Automation
**MANDATORY**: Automatically move misplaced files
```python
def organize_misplaced_files():
    """Move files to their correct directories."""
    import shutil
    import os
    
    for pattern, target_dir in FILE_ORGANIZATION.items():
        files = glob.glob(pattern, recursive=True)
        for file_path in files:
            if not file_path.startswith(target_dir):
                # Ensure target directory exists
                os.makedirs(target_dir, exist_ok=True)
                
                # Move file to correct location
                target_path = os.path.join(target_dir, os.path.basename(file_path))
                shutil.move(file_path, target_path)
                print(f"📁 Moved {file_path} → {target_path}")
```

### 4. Validation Checks
**MANDATORY**: Validate file organization
```python
def validate_file_organization():
    """Validate that files are in correct locations."""
    violations = []
    
    # Check for test files outside tests/
    test_files_outside = glob.glob("**/test_*.py", recursive=True)
    test_files_outside = [f for f in test_files_outside if not f.startswith("tests/")]
    
    if test_files_outside:
        violations.append(f"Test files outside tests/: {test_files_outside}")
    
    # Check for empty files
    empty_files = find_empty_files()
    if empty_files:
        violations.append(f"Empty files found: {empty_files}")
    
    if violations:
        raise ValueError(f"File organization violations: {violations}")
```

## Tool Integration

### 1. IDE Integration
**MANDATORY**: Configure IDE to follow file organization rules
```json
// VS Code settings
{
    "files.exclude": {
        "**/*.tmp": true,
        "**/*.temp": true,
        "**/*.swp": true,
        "**/*.swo": true,
        "**/*.bak": true,
        "**/*~": true
    },
    "files.watcherExclude": {
        "**/*.tmp": true,
        "**/*.temp": true
    }
}
```

### 2. Git Hooks Integration
**MANDATORY**: Use Git hooks for automatic cleanup
```bash
#!/bin/bash
# .git/hooks/pre-commit

echo "🧹 Running file organization cleanup..."

# Delete empty files
find . -name "*.py" -size 0 -delete
find . -name "*.js" -size 0 -delete
find . -name "*.md" -size 0 -delete

# Remove temporary files
find . -name "*.tmp" -delete
find . -name "*.temp" -delete
find . -name "*.swp" -delete
find . -name ".DS_Store" -delete

# Check for misplaced test files
if ls test_*.py 1> /dev/null 2>&1; then
    echo "❌ Error: Test files found in root directory"
    echo "Please move test files to tests/ directory"
    exit 1
fi

echo "✅ File organization cleanup complete"
```

### 3. CI/CD Pipeline Integration
**MANDATORY**: Validate file organization in CI/CD
```yaml
# GitHub Actions workflow
name: File Organization Check
on: [push, pull_request]

jobs:
  file-organization:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      
      - name: Check for empty files
        run: |
          if find . -name "*.py" -size 0 | grep -q .; then
            echo "❌ Empty Python files found"
            find . -name "*.py" -size 0
            exit 1
          fi
      
      - name: Check test file locations
        run: |
          if ls test_*.py 1> /dev/null 2>&1; then
            echo "❌ Test files in wrong location"
            ls test_*.py
            exit 1
          fi
      
      - name: Check file organization
        run: python scripts/validate_file_organization.py
```

## Monitoring and Reporting

### 1. File Organization Metrics
**MANDATORY**: Track file organization health
```python
def generate_file_organization_report():
    """Generate file organization health report."""
    report = {
        "empty_files": count_empty_files(),
        "misplaced_files": count_misplaced_files(),
        "temp_files": count_temp_files(),
        "total_files": count_total_files(),
        "organization_score": calculate_organization_score()
    }
    
    return report
```

### 2. Automated Alerts
**MANDATORY**: Alert on file organization issues
```python
def check_file_organization_violations():
    """Check for file organization violations and alert."""
    violations = []
    
    # Check for empty files
    empty_files = find_empty_files()
    if empty_files:
        violations.append(f"Empty files detected: {len(empty_files)} files")
    
    # Check for misplaced files
    misplaced = find_misplaced_files()
    if misplaced:
        violations.append(f"Misplaced files detected: {len(misplaced)} files")
    
    if violations:
        send_alert(f"File organization violations: {violations}")
```

## Error Prevention

### 1. Creation Validation
**MANDATORY**: Prevent creation of files in wrong locations
```python
def validate_file_creation(file_path: str) -> bool:
    """Validate file creation location."""
    # Prevent test files outside tests/
    if file_path.startswith("test_") and not file_path.startswith("tests/"):
        raise ValueError(f"Test file {file_path} must be in tests/ directory")
    
    # Prevent empty file creation
    if os.path.getsize(file_path) == 0:
        raise ValueError(f"Cannot create empty file: {file_path}")
    
    return True
```

### 2. Move Validation
**MANDATORY**: Validate file moves
```python
def validate_file_move(source: str, destination: str) -> bool:
    """Validate file move operation."""
    # Ensure proper directory structure
    expected_dir = get_expected_directory(source)
    if not destination.startswith(expected_dir):
        raise ValueError(f"File {source} should be moved to {expected_dir}, not {destination}")
    
    return True
```

## Cleanup Automation

### 1. Scheduled Cleanup
**MANDATORY**: Run regular cleanup operations
```python
def scheduled_cleanup():
    """Run scheduled file organization cleanup."""
    try:
        # Delete empty files
        empty_count = delete_empty_files()
        
        # Remove temporary files
        temp_count = remove_temp_files()
        
        # Organize misplaced files
        moved_count = organize_misplaced_files()
        
        print(f"✅ Cleanup complete: {empty_count} empty, {temp_count} temp, {moved_count} moved")
        
    except Exception as e:
        print(f"❌ Cleanup failed: {e}")
        raise
```

### 2. Interactive Cleanup
**MANDATORY**: Provide interactive cleanup tools
```python
def interactive_cleanup():
    """Interactive file organization cleanup."""
    print("🧹 File Organization Cleanup")
    print("=" * 30)
    
    # Show current state
    report = generate_file_organization_report()
    print(f"Empty files: {report['empty_files']}")
    print(f"Misplaced files: {report['misplaced_files']}")
    print(f"Temp files: {report['temp_files']}")
    
    # Ask for confirmation
    if input("Run cleanup? (y/N): ").lower() == 'y':
        scheduled_cleanup()
    else:
        print("Cleanup cancelled")
```

## Benefits

- **Clean Repository**: No empty or unnecessary files
- **Consistent Structure**: Predictable file organization
- **Improved Navigation**: Files in logical locations
- **Reduced Confusion**: Clear file organization rules
- **Automated Maintenance**: Minimal manual intervention

## Enforcement

This rule is **ALWAYS APPLIED** and must be followed for all:
- File creation and modification
- Code reviews and commits
- Repository maintenance
- Development workflows
- CI/CD pipelines

**Violations of this rule require immediate remediation and file reorganization.**

## Examples

### ✅ **CORRECT File Organization**
```
tests/
├── test_workflow_integration.py     # Integration test
├── unit/test_agent.py              # Unit test  
└── mocks/mock_llm.py               # Mock utility

agents/
├── requirements_analyst.py         # Agent implementation
└── base_agent.py                   # Base agent class

utils/
├── file_manager.py                 # Utility function
└── structured_outputs.py          # Structured outputs
```

### ❌ **INCORRECT File Organization**
```
# Empty files (should be deleted)
empty_test.py                       # 0 bytes
temp_file.tmp                       # 0 bytes

# Misplaced files (should be moved)
test_something.py                   # Should be in tests/
agent_helper.py                     # Should be in agents/
util_function.py                    # Should be in utils/
```

## Remember

**"A place for everything, and everything in its place."**

**"Empty files are digital clutter - eliminate them immediately."**

**"Consistent organization reduces cognitive load and improves productivity."**